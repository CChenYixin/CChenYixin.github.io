<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>速去逮一只猫</title>
  <subtitle>办法总比困难多。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chenyixin.win/"/>
  <updated>2017-07-22T13:39:49.975Z</updated>
  <id>http://chenyixin.win/</id>
  
  <author>
    <name>Chen Yixin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git 基本原理和常用命令</title>
    <link href="http://chenyixin.win/2017/07/22/title-%20Git%20%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E5%92%8C%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://chenyixin.win/2017/07/22/title- Git 基本原理和常用命令/</id>
    <published>2017-07-22T13:36:11.090Z</published>
    <updated>2017-07-22T13:39:49.975Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>介绍 Git 的基本原理以及一些常用的操作命令。</p>
<h2 id="Git基本原理"><a href="#Git基本原理" class="headerlink" title="Git基本原理"></a>Git基本原理</h2><h3 id="Git文件改动提交的基本原理"><a href="#Git文件改动提交的基本原理" class="headerlink" title="Git文件改动提交的基本原理"></a>Git文件改动提交的基本原理</h3><p>Git 是一种分布式的版本控制工具。它的控制系统由两个部分组成:工作区（Working Directory） 和 版本库（Repository）。</p>
<p><img src="http://ww1。sinaimg。cn/mw690/75fcfef2ly1fhsxocsxz5j20cq06iaa8。jpg" alt="git控制系统"></p>
<p>Git 的工作流程如上图所示，首先是我们日常的 <strong>工作区</strong>，它实际持有文件。其次是 <strong>版本库</strong>，即工作区隐藏文件<code>。git</code>，记录我们文件的变动和提交。在版本库中，最重要的内容是 <strong>缓存区*(Index/stage)</strong>，它就像一个缓存区域，用来临时保存你的文件变动。最后是 <strong>HEAD</strong>，它一般指向我们最后一次提交的结果。</p>
<p>也就是说。当我们往 Git 版本库中添加文件的时候，会分成两个部分来执行，首先用<code>git add</code>把文件添加到缓存区，然后再用<code>git commit</code>提交更改，即把缓存区的文件提交到当前的分支上去。</p>
<h3 id="Git版本控制的基本原理"><a href="#Git版本控制的基本原理" class="headerlink" title="Git版本控制的基本原理"></a>Git版本控制的基本原理</h3><p>Git会记录我们的每一次提交，这样我们对文件的改动就会像时间线一样被 Git 记录下来。而 <strong>HEAD</strong> 就指向这条时间线最后一次提交的结果。因此比如说我们要回退到上一个版本就可以用命令<code>git reset --hard HEAD^</code>，但如果我们要回退到某个版本，我们就必须要只要那个版本的版本号(commit id)， Git提供了命令<code>git log</code>来供我们查找历史纪录。</p>
<p>这样我们通过<code>git log</code>来查询我们需要回退的版本号，然后利用命令<code>git reset --hard 版本号</code>来回退到我们需要的版本。</p>
<h3 id="Git分支管理的基本原理"><a href="#Git分支管理的基本原理" class="headerlink" title="Git分支管理的基本原理"></a>Git分支管理的基本原理</h3><p>上面指出 <strong>HEAD</strong> 一般指向我们的最后次的结果。那么<code>HEAD</code>本身是什么呢?通俗的来说，<code>HEAD</code>是一个指针，一般来说指向分支的最顶端，也就是我们最后一次提交的结果，但实际上它可以指向任意一个节点， Git就是利用它来追踪位置。当我们初始化一个 Git 仓库时，默认指向我们的主分支<code>master</code>。假如我们创建新的分支时，我们就可以通过命令<code>git checkout 分支名</code>切换到新的分支，这时<code>HEAD</code>指向我们新建的分支，这时对工作区的修改和提交就是针对我们新建的这个分支了，而原来<code>master</code>不会变化。当我们在新建的分支上修改满意后，再切回到主分支，然后用命令<code>git merge</code>把刚刚修改的结果合并到主分支上。这样就完成了一次分支的操作。</p>
<h2 id="常用-Git-命令"><a href="#常用-Git-命令" class="headerlink" title="常用 Git 命令"></a>常用 Git 命令</h2><h3 id="文件改动提交相关"><a href="#文件改动提交相关" class="headerlink" title="文件改动提交相关"></a>文件改动提交相关</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># 添加指定文件或目录到缓存区</div><div class="line">$ git add file/dir</div><div class="line"></div><div class="line"># 添加加当前目录的所有文件到暂存区</div><div class="line">$ git add 。</div><div class="line"></div><div class="line"># 提交缓存区到仓库区</div><div class="line">$ git commit -m &quot;代码提交信息&quot;</div><div class="line"></div><div class="line"># 提交工作区自上次commit之后的变化，直接到仓库区</div><div class="line">$ git commit -a</div><div class="line"></div><div class="line"># 显示有变更的文件</div><div class="line">$ git status</div><div class="line"></div><div class="line"># 提交到远程的仓库</div><div class="line">git push origin master</div></pre></td></tr></table></figure>
<h3 id="版本控制相关"><a href="#版本控制相关" class="headerlink" title="版本控制相关"></a>版本控制相关</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># 显示当前分支的版本历史</div><div class="line">$ git log</div><div class="line">$ git log --pretty=oneline</div><div class="line"></div><div class="line"># 显示暂存区和工作区的差异</div><div class="line">$ git diff</div><div class="line"></div><div class="line"># 显示当前分支的最近几次提交</div><div class="line">$ git reflog</div><div class="line"></div><div class="line"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</div><div class="line">$ git reset --hard &quot;版本号&quot;</div></pre></td></tr></table></figure>
<h3 id="分支管理相关"><a href="#分支管理相关" class="headerlink" title="分支管理相关"></a>分支管理相关</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"># 列出所有本地分支</div><div class="line">$ git branch</div><div class="line"></div><div class="line"># 新建一个分支，并切换到该分支</div><div class="line">$ git checkout -b &quot;分支名&quot;</div><div class="line"></div><div class="line"># 切换到指定分支，并更新工作区</div><div class="line">$ git checkout &quot;分支名&quot;</div><div class="line"></div><div class="line"># 合并指定分支到当前分支</div><div class="line">$ git merge &quot;指定分支&quot;</div><div class="line"></div><div class="line"># 删除分支</div><div class="line">$ git branch -d &quot;分支名&quot;</div><div class="line"></div><div class="line"># 提交到远程的仓库</div><div class="line">$ git push origin &quot;分支名&quot;</div><div class="line"></div><div class="line"># 要更新你的本地仓库至最新改动</div><div class="line">$ git pull</div></pre></td></tr></table></figure>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 显示当前的Git配置</div><div class="line">$ git config --list</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://rogerdudler。github。io/git-guide/index。zh。html" target="_blank" rel="external">git - 简明指南</a><br><a href="http://www。ruanyifeng。com/blog/2015/12/git-cheat-sheet。html" target="_blank" rel="external">常用 Git 命令清单</a><br><a href="https://www。liaoxuefeng。com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">git教程 -廖雪峰</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;介绍 Git 的基本原理以及一些常用的操作命令。&lt;/p&gt;
&lt;h2 id=&quot;Git基本原理&quot;&gt;&lt;a href=&quot;#Git基本原理&quot; class
    
    </summary>
    
    
      <category term="Git" scheme="http://chenyixin.win/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Linux 命令行和 Vim 使用的基础操作</title>
    <link href="http://chenyixin.win/2017/07/17/title-%20Linux%20%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%92%8C%20vim%20%E4%BD%BF%E7%94%A8%E7%9A%84%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
    <id>http://chenyixin.win/2017/07/17/title- Linux 命令行和 vim 使用的基础操作/</id>
    <published>2017-07-17T12:00:40.668Z</published>
    <updated>2017-07-17T12:01:35.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>一些 linux 命令行和 vim 编辑器的基础操作</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="linux命令行基础操作"><a href="#linux命令行基础操作" class="headerlink" title="linux命令行基础操作"></a>linux命令行基础操作</h3><p>与 Windows 中磁盘分区的概念不同, Linux 中并没有类似C盘这样的说法,而是都以文件名来表示,所有的文件和目录都挂载在根目录「/」下面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//linux命令行</div><div class="line">$ 命令 -选项缩写 --选项 参数</div><div class="line">结果</div></pre></td></tr></table></figure></p>
<h4 id="目录相关操作"><a href="#目录相关操作" class="headerlink" title="目录相关操作"></a>目录相关操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//创建目录</div><div class="line">mkdir 目录名</div><div class="line">mkdir  -p 目录路径</div><div class="line"></div><div class="line">//其中 . 代表当前目录 .. 代表上层目录 ~ 代表当前登录用户的宿主目录 - 代表前一目录,既进入当前目录之前操作的目录</div><div class="line">cd 进入目录</div><div class="line">pwd 显示当前目录</div></pre></td></tr></table></figure>
<h4 id="文件相关操作"><a href="#文件相关操作" class="headerlink" title="文件相关操作"></a>文件相关操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//创建文件</div><div class="line">touch 文件名</div><div class="line"></div><div class="line">//删除文件</div><div class="line">rm 文件</div><div class="line">rm -r 目录名</div><div class="line">rm -i 删除文件时是否确认</div><div class="line"></div><div class="line">//复制文件</div><div class="line">cp 源文件名 目标路径</div><div class="line">cp  -r 目录 目录</div><div class="line"></div><div class="line">//移动文件</div><div class="line">mv 要移动的文件 目标路径</div></pre></td></tr></table></figure>
<h4 id="列出文件清单操作"><a href="#列出文件清单操作" class="headerlink" title="列出文件清单操作"></a>列出文件清单操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ls 文件名或目录名</div><div class="line">ls -l 列出详细信息</div><div class="line">ls -a 列出所有文件包括隐藏文件</div><div class="line">ls -R 列出所有内容包括子目录</div></pre></td></tr></table></figure>
<h3 id="vim-编辑器基础操作"><a href="#vim-编辑器基础操作" class="headerlink" title="vim 编辑器基础操作"></a>vim 编辑器基础操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//进入vim编辑器</div><div class="line">vim</div><div class="line">//进入教程</div><div class="line">vimtutor</div><div class="line">//插入文本</div><div class="line">i</div><div class="line">//保存并推出</div><div class="line">:wq</div><div class="line">//直接退出</div><div class="line">:q</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://blog.csdn.net/lykangjia/article/details/11655887" target="_blank" rel="external">linux基本命令</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;一些 linux 命令行和 vim 编辑器的基础操作&lt;/p&gt;
&lt;h2 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;header
    
    </summary>
    
    
      <category term="linux" scheme="http://chenyixin.win/tags/linux/"/>
    
      <category term="vim" scheme="http://chenyixin.win/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>「专注概念 VOL.1」JavaScript 语法</title>
    <link href="http://chenyixin.win/2017/03/05/title-%20%E3%80%8C%E4%B8%93%E6%B3%A8%E6%A6%82%E5%BF%B5%20VOL.1%E3%80%8DJavaScript%20%E8%AF%AD%E6%B3%95/"/>
    <id>http://chenyixin.win/2017/03/05/title- 「专注概念 VOL.1」JavaScript 语法/</id>
    <published>2017-03-05T15:29:39.860Z</published>
    <updated>2017-07-17T12:16:48.965Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><blockquote>
<p>“Focus on concepts, not syntax”<br>“把注意力放在对概念的理解，而不是语法上”</p>
</blockquote>
<p>这是在某个网站上看到的一句话，也这是记述这个系列的笔记的原因。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ul>
<li><p>变量是对“值”的引用，使用变量等同于引用一个值，每一个变量都有一个变量名，变量可以用来保存任何值。在 JavaScript 中没有块作用域，只存在全局作用域和函数作用域。当在函数中使用<code>var</code>定义一个变量，那么这个变量就是局部变量，在函数退出后就会被销毁。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function test()&#123;</div><div class="line">    var message = &apos;hi&apos;;</div><div class="line">&#125;</div><div class="line">test();</div><div class="line">alert(message);//错误</div></pre></td></tr></table></figure>
</li>
<li><p>在同一个作用域中，一个变量只能保存一个值，如果使用<code>var</code>第二次生命且赋值，会覆盖掉前面的值。</p>
</li>
<li>JavaScript引擎的工作方式是，首先解析代码，获取所有被声明的变量，然后在一行行的执行，所以所有的变量声明语句，都会被提到代码的头部，这就叫做“变量提升”。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">console.log(a);</div><div class="line">var a = 1;//undefined</div></pre></td></tr></table></figure>
</li>
</ul>
<p>JavaScript 是一行行的运行代码，按理第一行代码后应该抛出错误，但是实际上由于变量提升的原因，浏览器并不会报错，而会显示<code>undefined</code>，表示 a 已经声明但未赋值。</p>
<ul>
<li>标识符就是用来识别一个具体对象的名称，变量名就是一种标识符。</li>
<li>我们可以使用switch语句来代替多个if…else的情况，基本结构如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">switch ( expression)&#123;</div><div class="line">    case value: statement</div><div class="line">    break;</div><div class="line">    case value: statement</div><div class="line">    break;</div><div class="line">    case value: statement</div><div class="line">    break;</div><div class="line">    ...</div><div class="line">    default:statement</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>语句中的每一个情形 case ，其基本含义如果表达式等于语句中的这个值 value，则执行后面的语句 statement。break 表示提出switch结构，而default表示，当每一种case都不符合时，执行其后面的语句。</p>
<ul>
<li>三元运算符，假如语句中condition为true则，返回expr1的值，负责返回expr2的值。<br><code>(condition) ? expr1 : expr2</code></li>
<li>javascript中可以再代码中添加标签，以便将来使用。通常用来和 break 和 continue 配合使用来跳出循环。break会立即退出循环强制执行循环后面的语句，而continue虽然也是立即退出循环，但会重循环的顶层继续执行。</li>
</ul>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul>
<li>JavaScript（ES5） 中有六种数据类型。<blockquote>
<p>数值（number）：整数和小数（比如1和3.14）<br>字符串（string）：字符组成的文本（比如”Hello World”）<br>布尔值（boolean）：true（真）和false（假）两个特定值<br>undefined：表示“未定义”或不存在，即此处目前没有任何值<br>null：表示空缺，即此处应该有一个值，但目前为空<br>对象（object）：各种值组成的集合</p>
</blockquote>
</li>
</ul>
<p>在这其中，数值、字符串、布尔值被称为原始类型的值，undefined 和 null 被看作是两个特殊值。而对象是JavaScript中比较复杂的值。广义的对象包括数组、函数、甚至连原始类型的值都可以包装为对象来使用。</p>
<ul>
<li>我们通常用以下三种方法来确定一个值的类型。<blockquote>
<p>typeof运算符<br>instance of运算符<br>Object.prototype.tostring()方法</p>
</blockquote>
</li>
</ul>
<p>当我们调用<code>typeof</code>运算符时候，数值、字符串、布尔值分别返回<code>number</code> <code>string</code> <code>boolean</code> ,函数返回<code>function</code> ,undefined 返回<code>undefined</code>,其他的诸如对象，数组，null都返回<code>object</code>。<br>假如我们要具体判断是否是数组或对象，我们可以使用<code>instance of</code>。</p>
<ul>
<li>如果JavaScript预期某个位置应该是布尔值，会将该位置上现有的值自动转为布尔值。转换规则是除了下面六个值被转为false，其他值都视为true。<blockquote>
<p>undefined<br>null<br>false<br>0<br>NaN<br>“”或’’（空字符串）</p>
</blockquote>
</li>
</ul>
<h3 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h3><ul>
<li><p>NaN是JavaScript的一种特殊值，表示非数字（NOT A NUMBER）,主要出现在将字符串解析成数字出错的场合。NaN不等于任何值，包括它本身。我们可以使用<code>isNaN</code>来判断一个值是否是NaN，但需要注意的在使用前，最好先判断该值是不是数值，因为 <strong>如果传入其他值，会被先转成数值。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">isNaN([123]) // false</div><div class="line"></div><div class="line">//good</div><div class="line">function myIsNaN(value) &#123;</div><div class="line">  return typeof value === &apos;number&apos; &amp;&amp; isNaN(value);</div><div class="line">&#125;</div><div class="line">//or</div><div class="line">function myIsNaN(value) &#123;</div><div class="line">  return value !== value;//NaN不等于任何值</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>与数值有关的全局方法<code>parseInt()</code>和<code>parseFloat()</code>。<br>parseInt方法用于将字符串转换为整数。假如字符串的头部有空格，会被自动去除，假如要转换的不是字符串，会先转换为字符串在转换。字符串转换为整数的时候是 <strong>一个一个转换，如果遇到不能转换为数字的字符，就不再进行返回已经转好的部分</strong>，换句话说只转换字符串头部可以转换的部分。（正负号除外。）该方法接受参数，表示被转换值的进制，默认为十进制转十进制。</p>
</li>
<li><p>parseFloat方法用于将一个字符串转为浮点数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">parseInt(1.23) // 1</div><div class="line">parseFloat(1.23) // 1.23</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul>
<li>字符串可以被视为字符数组，从来调用<code>[]</code>来返回某个位置的字符。但是字符串是只读的，无法运用数组的方法来改变字符串。字符串<code>length</code>属性返回字符串的长度。</li>
<li><code>charAt()</code>方法可返回指定位置的字符。<code>charCodeAt()</code> 方法可返回指定位置的字符的 Unicode 编码。这个返回值是 0 - 65535 之间的整数。我们常常用到来验证表单输入<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">var inputText = document.getElementsByClassName(&apos;inputtext&apos;)[0];</div><div class="line">var tip = document.getElementById(&apos;tip&apos;);</div><div class="line">var button = document.getElementsByTagName(&apos;input&apos;)[1];</div><div class="line"></div><div class="line">//字符长度</div><div class="line">var strLength = function(str)&#123;</div><div class="line">    var len = 0;</div><div class="line">    for(var i=0;i&lt;str.length;i++)&#123;</div><div class="line">        charCode =  str.charCodeAt(i);</div><div class="line">        if(charCode &gt;= 0 &amp;&amp; charCode &lt;= 128)&#123;</div><div class="line">            len +=1;</div><div class="line">        &#125;else&#123;</div><div class="line">            len +=2;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">       return len;</div><div class="line">&#125;;</div><div class="line">//验证</div><div class="line">function validate()&#123;</div><div class="line">    var content = inputText.value.trim();</div><div class="line">    if(strLength(content) === 0)&#123;</div><div class="line">        tip.innerHTML = &apos;名称不能为空！&apos;;</div><div class="line">        tip.className = &apos;on&apos;;</div><div class="line">        inputText.className += &apos; warn&apos;;</div><div class="line">    &#125;else if( strLength(content)&gt;=4 &amp;&amp; strLength(content)&lt;=16 )&#123;</div><div class="line">        tip.innerHTML = &apos;格式正确&apos;;</div><div class="line">    &#125;else&#123;</div><div class="line">        tip.innerHTML =&apos;字符数应为4-16位&apos;;</div><div class="line">        tip.className = &apos;on&apos;;</div><div class="line">        inputText.className=&apos;warn&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//绑定</div><div class="line">button.onclick =function()&#123;</div><div class="line">    validate();</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><ul>
<li><p>对象，就是一种无序的数据集合，由若干和“键值对”构成，所有键名都是字符串。我们可以用下面三种方法来生成对象。</p>
<blockquote>
<p>var object1 = {};<br>var object2 = new Object();<br>var object3 = Object.create(Object.prototype);</p>
</blockquote>
</li>
<li><p>对象的键名又称为属性，它的键值可以是任何值，如果一个属性的值为函数，那么这个属性称为方法，可以像函数一样调用。</p>
</li>
<li><p><strong>不同的变量名指向同一个对象，那么它们都是这个对象的引用，指向同一个内存地址，这意味着修改其中一个变量会影响到其他所有的变量</strong>，对于原始类型的值来说，是传值引用。因为是值的拷贝，所以当某个变量的值发生变化，另外一个不会受到影响，因为它们并不是指向同一个内存地址。</p>
</li>
<li><p>我们用<code>in</code>运算符来检查对象是否包含某个属性，用<code>for..in</code>来遍历对象的全部属性，因为可以遍历继承的属性，假如要只遍历对象本身的属性，需要用到<code>hasOwnPrototype</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">for (var key in person) &#123;</div><div class="line">  if (person.hasOwnProperty(key)) &#123;</div><div class="line">    console.log(key);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul>
<li><p>数组，按次序排列的一组值。数组本身一种特殊的对象，比如<code>in</code>和<code>for...in</code>都可以被数组使用。我们也可以使用对象的方法<code>Object.keys</code>来返回数组的键名：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];</div><div class="line"></div><div class="line">Object.keys(arr)</div><div class="line">// [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;]</div></pre></td></tr></table></figure>
</li>
<li><p>数组的length属性返回数组的成员数量。<strong>注意<code>length</code>是一个可写的属性</strong>，这意味着如果人为设置一个小于当前成员个数的值，该数组的成员会自动减少到length设置的值。将数组清空的一个有效方法，就是将length属性设为0。</p>
</li>
</ul>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>(另写文章总结)</p>
<h3 id="语法错误"><a href="#语法错误" class="headerlink" title="语法错误"></a>语法错误</h3><ul>
<li>了解基本的错误类型：<blockquote>
<p>SyntaxError是解析代码时发生的语法错误<br>ReferenceError是引用一个不存在的变量时发生的错误<br>RangeError是当一个值超出有效范围时发生的错误<br>TypeError是变量或参数不是预期类型时发生的错误</p>
</blockquote>
</li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://javascript.ruanyifeng.com/" target="_blank" rel="external">JavaScript 标准参考教程</a><br><a href="http://baike.baidu.com/item/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1?fr=aladdin" target="_blank" rel="external">JavaScript高级程序设计</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;“Focus on concepts, not syntax”&lt;br&gt;“把注意力放在对概念的理解，而不是语法上”&lt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://chenyixin.win/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 和树</title>
    <link href="http://chenyixin.win/2017/02/27/title-%20JavaScript%20%E5%92%8C%20%E6%A0%91/"/>
    <id>http://chenyixin.win/2017/02/27/title- JavaScript 和 树/</id>
    <published>2017-02-27T06:51:52.076Z</published>
    <updated>2017-07-17T12:23:24.233Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>百度 IFE 任务22到24的相关笔记，主要关于树的概念，遍历。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="树与二叉树"><a href="#树与二叉树" class="headerlink" title="树与二叉树"></a>树与二叉树</h3><p>树形结构是一种重要的数据结构，我们常常用树来组织信息，描述遍历的行为过程。首先是树的概念：树是一个有 n 个结点的有限集。在任意一个非空的树中有且仅有一个特定的结点称为根，当结点大于1时，各个结点可以分为互不相交的有限集合，每个集合本身又是一棵树，称为根的子树。树是具有层次结构的，我们把根结点所在层称为第一层，其孩子为第二层，以此类推，树中结点的最大层次称为树的深度。</p>
<p>而二叉树是一种特殊的树。它的特点是每个结点至多只有两棵子树（即二叉树中不存在度大于2的结点），并且，二叉树的子树有左右之分（其次序不能任意颠倒。）二叉树的性质：<br>1.在二叉树的第i层上至多有2的i-1次方个结点(i&gt;=1)。<br>2.深度为k的二叉树至多有2的k次方-1个结点，(k&gt;=1)。<br>3.对任何一棵二叉树T，如果其终端结点数为n0，度为2的结点数为n2，则n0 = n2 + 1;</p>
<h3 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h3><p>二叉树的遍历主要分三种：</p>
<ul>
<li>先（根）序遍历：根左右</li>
<li>中（根）序遍历：左根右</li>
<li>后（根）序遍历：左右根</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">//前序</div><div class="line">function preOrderRec(node)&#123;</div><div class="line">    if(node)&#123;</div><div class="line">        divList.push(node);</div><div class="line">        preOrderRec(node.firstElementChild);</div><div class="line">        preOrderRec(node.lastElementChild);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//中序</div><div class="line">function inOrderRec(node)&#123;</div><div class="line">    if(node)&#123;</div><div class="line">        inOrderRec(node.firstElementChild);</div><div class="line">        divList.push(node);</div><div class="line">        inOrderRec(node.lastElementChild);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//后序</div><div class="line">function postOrderRec(node)&#123;</div><div class="line">    if(node)&#123;</div><div class="line">        postOrderRec(node.firstElementChild);</div><div class="line">        postOrderRec(node.lastElementChild);</div><div class="line">        divList.push(node);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="多叉树遍历"><a href="#多叉树遍历" class="headerlink" title="多叉树遍历"></a>多叉树遍历</h3><h4 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h4><blockquote>
<p>深度优先遍历，从初始访问结点出发，我们知道初始访问结点可能有多个邻接结点，深度优先遍历的策略就是首先访问第一个邻接结点，然后再以这个被访问的邻接结点作为初始结点，访问它的第一个邻接结点。总结起来可以这样说：每次都在访问完当前结点后首先访问当前结点的第一个邻接结点。</p>
</blockquote>
<p>具体算法表述如下：</p>
<ol>
<li>访问初始结点v，并标记结点v为已访问。</li>
<li>查找结点v的第一个邻接结点w。</li>
<li>若w存在，则继续执行4，否则算法结束。</li>
<li>若w未被访问，对w进行深度优先遍历递归（即把w当做另一个v，然后进行步骤123）。</li>
<li>查找结点v的w邻接结点的下一个邻接结点，转到步骤3。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function traverseDF(node,nodeList)&#123;</div><div class="line">    if(node)&#123;</div><div class="line">        nodeList.push(node);</div><div class="line">        for(var i= 0;i&lt;node.children.length;i++)&#123;</div><div class="line">            traverseDF(node.children[i],nodeList);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h4><blockquote>
<p>类似于一个分层搜索的过程，广度优先遍历需要使用一个队列以保持访问过的结点的顺序，以便按这个顺序来访问这些结点的邻接结点。</p>
</blockquote>
<p>具体算法表述如下：</p>
<ol>
<li>访问初始结点v并标记结点v为已访问。</li>
<li>结点v入队列</li>
<li>当队列非空时，继续执行，否则算法结束。</li>
<li>出队列，取得队头结点u。</li>
<li>查找结点u的第一个邻接结点w。</li>
<li>若结点u的邻接结点w不存在，则转到步骤3；否则循环执行以下三个步骤：<blockquote>
<p>1). 若结点w尚未被访问，则访问结点w并标记为已访问。<br>2). 结点w入队列<br>3). 查找结点u的继w邻接结点后的下一个邻接结点w，转到步骤6。</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function traverseBF(node, nodeList) &#123;</div><div class="line">    if (node) &#123;</div><div class="line">        nodeList.push(node);</div><div class="line">        //nextElementSibling 返回当前元素在其父元素的子元素节点中的后一个元素节点,如果该元素已经是最后一个元素节点,则返回null,该属性是只读的.</div><div class="line">        traverseBF(node.nextElementSibling, nodeList);//回传 node的下一个元素对象</div><div class="line">        node = nodeList[BFindex++];</div><div class="line">        //ParentNode.firstElement 是一个只读属性，返回当前元素的第一个子元素节点，如果没有子元素节点，则返回null。</div><div class="line">        traverseBF(node.firstElementChild, nodeList);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这部分的IFE任务大部分都参考了别人的代码，感觉这方面有待加强，感觉除过 Javascript 的相关内容，如果对计算机的一些基本的基础的概念有个良好的把握的话对这些会更有帮助，理解起来可能更好理解。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://segmentfault.com/a/1190000002685939" target="_blank" rel="external">图的理解：深度优先和广度优先遍历</a><br><a href="https://segmentfault.com/a/1190000000740261#articleHeader11" target="_blank" rel="external">js数据结构和算法（三）二叉树</a><br><a href="http://www.cnblogs.com/webFrontDev/p/3865719.html" target="_blank" rel="external">javascript实现数据结构： 树和二叉树,二叉树的遍历和基本操作</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;百度 IFE 任务22到24的相关笔记，主要关于树的概念，遍历。&lt;/p&gt;
&lt;h2 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://chenyixin.win/tags/JavaScript/"/>
    
      <category term="tree" scheme="http://chenyixin.win/tags/tree/"/>
    
  </entry>
  
  <entry>
    <title>IFE task 13-21 笔记</title>
    <link href="http://chenyixin.win/2017/02/26/title-%20IFE%20task%2013-21%20%E7%AC%94%E8%AE%B0/"/>
    <id>http://chenyixin.win/2017/02/26/title- IFE task 13-21 笔记/</id>
    <published>2017-02-26T08:13:39.646Z</published>
    <updated>2017-07-17T12:23:01.865Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>文章为百度前端技术学院2016年任务 13-21 的笔记，大概是 Jvascript 基础部分。总结了一些收获，记述了其中遇到的问题和困难，以及一点感想。因为内容稍微多一点，文章的结构就按照各个任务来划分。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="任务-13"><a href="#任务-13" class="headerlink" title="任务 13"></a>任务 13</h3><p>假设我们要获取某个输入域中的数值，我们可能需要<code>value</code>属性和’parseInt()’。首先，我们需要注意在HTML中<code>value</code>是<code>input</code>的设定值，对于不同的输入类型，<code>value</code>属性的用法也有区别：</p>
<blockquote>
<p>type=”button”, “reset”, “submit” - 定义按钮上的显示的文本<br>type=”text”, “password”, “hidden” - 定义输入字段的初始值<br>type=”checkbox”, “radio”, “image” - 定义与输入相关联的值</p>
</blockquote>
<p>正如任务13中一样我们要获取’id=”aqi-input”‘的value值，我们可以用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var inputValue = document.getElementById(&apos;aqi-input&apos;).value;</div></pre></td></tr></table></figure></p>
<p>这样我们就获得了<code>input</code>中的输入值，当然此时获得的是字符串。我们在用<code>parseInt()</code>来将给定的字符串解析成整数(如果被解析参数的第一个字符无法被转化成数值类型，则返回 NaN。另外可以给其传入第二个参数，用于指定转换的基数)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var num = parseInt(inputValue);</div></pre></td></tr></table></figure></p>
<p>在实际应用过程中我们可能需要判断得到的值。这时我们可以用<code>isNaN</code>来判断是否是一个NaN值，具体操作中我们往往需要在前面加个<code>!</code>(非)来表示判断该值是否符合条件：if(!isNaN(num))，假如num是一个数值的话。</p>
<h3 id="任务14"><a href="#任务14" class="headerlink" title="任务14"></a>任务14</h3><p>对数据的操作是个人认为学习的难点，数据可能保存在一个数组中或对象里。所以对数组进行的操作是也需要重点的关注。比如在任务中我们需要对数组进行重排序。就需要用到<code>sort()</code>方法，’sort()’方法在适当的位置对数组的元素进行排序，并返回数组，默认的排序可能会按照字符串的Unicode，所以排序的顺序不是很稳定，方法接受一个参数，为某种顺序进行排列的函数。</p>
<blockquote>
<p>如果 compareFunction(a, b) 小于 0 ，那么 a 会被排列到 b 之前；<br>如果 compareFunction(a, b) 等于 0 ， a 和 b 的相对位置不变。<br>如果 compareFunction(a, b) 大于 0 ， b 会被排列到 a 之前。</p>
</blockquote>
<p>所以我们可以这个来进行排序：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">aqiData.sort(function(a,b)&#123;</div><div class="line">    return b[1] - a[1];</div></pre></td></tr></table></figure></p>
<p>按照上面的写法，aqiData会按照自大到小的顺序来排列。除了<code>sort()</code>还有’reverse()’的方法反转数组来进行重排序。除了排序，有些时候我们还要对数组进行迭代，找出合适或者不合适的对象比如：</p>
<ul>
<li><p>filter()方法。filter方法的参数是一个函数，所有数组成员依次执行该函数，返回结果为true的成员组成一个新数组返回。该方法不会改变原数组。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[1, 2, 3, 4, 5].filter(function (elem) &#123;</div><div class="line">  return (elem &gt; 3);</div><div class="line">&#125;)</div><div class="line">// [4, 5]</div></pre></td></tr></table></figure>
</li>
<li><p>map()方法。map方法对数组的所有成员依次调用一个函数，根据函数结果返回一个新数组。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var numbers = [1, 2, 3];</div><div class="line">numbers.map(function (n) &#123;</div><div class="line">  return n + 1;</div><div class="line">&#125;);</div><div class="line">// [2, 3, 4]</div><div class="line">numbers</div><div class="line">// [1, 2, 3]</div></pre></td></tr></table></figure>
</li>
<li><p>every()方法：对数组每一项运行给定函数，如果每一项返回true，则返回true some()方法：对数组每一项运行给定函数，如果任意一项返回true，则返回true forEach()方法：对数组每一项运行给定函数，无返回值，相当于遍历数组。<br>除过数组的操作，有关<code>document</code>节点的操作也很重要。<code>document</code>是文档的根节点，只要浏览器开始载入HTML文档，这个节点对象就存在了，可以直接调用。最常用比如查找节点的方法以及生成节点的方法。</p>
</li>
</ul>
<ol>
<li>查找节点</li>
</ol>
<ul>
<li>document.querySelector()，可以接受一个CSS选择器作为参数，返回匹配改选择器的元素节点，如果有多个满足条件的元素节点，则返回第一个匹配的节点。</li>
<li>document.getElementsByTagName()，返回所有指定的HTML标签的元素，返回值是一个元素的集合。</li>
<li>document.getElementsByClassName(),返回所有CLASS符合指定条件的元素，返回值一个元素的集合。</li>
<li>document.getElementsByName()，选择拥有name属性的HTML元素.</li>
<li>document.getElementById(),返回匹配指定id属性的元素节点。</li>
</ul>
<ol>
<li>生成节点</li>
</ol>
<ul>
<li>document.createElement()，用来生成网页元素节点。</li>
<li>document.createTextNode()，方法用来生成文本节点，参数为所要生成的文本节点的内容。</li>
</ul>
<p>除了作为根节点的<code>document</code>，DOM 文本对象模型中的每个组成单位都可以看作成为一个节点(node),所有节点对象都是浏览器内置的Node对象的实例，继承了Node属性和方法。比如：</p>
<ol>
<li>节点的相关属性</li>
</ol>
<ul>
<li>Node.parentNode，属性返回当前节点的父节点。</li>
<li>Node.childNodes，返回一个NodeList集合，成员包括当前节点的所有子节点。</li>
<li>Node.firstChild，Node.lastChild，firstChild属性返回当前节点的第一个子节点，lastChild属性返回当前节点的最后一个子节点。</li>
</ul>
<ol>
<li>节点对象的方法</li>
</ol>
<ul>
<li><p>Node.appendChild()方法接受一个节点对象作为参数，将其作为最后一个子节点，插入当前节点。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var p = document.createElement(&apos;p&apos;);</div><div class="line">document.body.appendChild(p);</div></pre></td></tr></table></figure>
</li>
<li><p>Node.removeChild()方法接受一个 <strong>子节点</strong> 作为参数，用于从当前节点移除该子节点。<strong>它返回被移除的子节点。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var divA = document.getElementById(&apos;A&apos;);</div><div class="line">divA.parentNode.removeChild(divA);</div><div class="line">//注意：是在其父节点上调用，而不是被移除的节点。</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="任务15-和-任务20"><a href="#任务15-和-任务20" class="headerlink" title="任务15 和 任务20"></a>任务15 和 任务20</h3><p>当开始遇到较为复杂一点的功能，首先要做的就是理清逻辑，比如任务15我们需要：得到数据；对数据排序；对数据渲染；给按钮绑定函数；初始化。<br>在处理数据时我们常常对字符串进行操作，主要有这些属性和方法：</p>
<ul>
<li>length属性，返回字符串的长度。</li>
<li>concat()方法，用于合并两个字符串，返回一个新的字符串，不改变原字符串。</li>
<li>slice()方法，用于从原字符串中取出子字符串，接受两个参数，一个是起始位置，一个结束位置(不含该位置)，这个方法不会改变原字符串。</li>
<li>substr()方法，用于从原字符串中取出子字符串，接受两个参数，一个是起始位置，一个是子字符串的长度，不改变原字符串。</li>
<li>trim()方法，用于去除字符串 <strong>两端</strong> 的空格，返回一个新的字符串。</li>
<li>match()方法，用于确定原字符串是否匹配某个字符串，如果有则返回一个数组，成员为匹配的第一个字符串。可接受正则表达式。</li>
<li>replace()方法，用于替换匹配的字符串。</li>
<li>split()方法，按照给定的规则来分割字符串，返回一个有分割出来的子字符串组成的数组。</li>
</ul>
<h3 id="任务16-和-任务18"><a href="#任务16-和-任务18" class="headerlink" title="任务16 和 任务18"></a>任务16 和 任务18</h3><p>除了字符串，也常常要对Array对象进行操作。最常用的有：</p>
<ul>
<li>toString()方法返回数组的字符串形式。</li>
<li>push()方法用于在数组的末端添加一个或者多个元素，并且返回 <strong>添加新元素后的数组长度</strong>，这个方法会改变原数组。</li>
<li>pop()方法用于删除数组的最后一个元素，并且 <strong>返回该元素</strong>，这个方法会改变原数组。</li>
<li>shift()方法删除数组的第一个元素，并且 <strong>返回该元素</strong> ，这个方法会改变数组。</li>
<li>unshift()方法给数组的第一位置添加元素并且返回添加新元素的数组长度，这个方法会改变数组。</li>
<li>jion()方法以参数作为分隔符，将所有数组成员组成一个字符串返回，如果不提供参数，默认用逗号。</li>
</ul>
<p>当取得某个<code>input</code>的值后我们需要通过正则表达式来判断是否符合我们的限定，比如在任务16中，用户输入的城市名必须为中英文字符，空气质量指数必须为整数，就可以通过如下来匹配：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">function addAqiData()&#123;</div><div class="line">    var cityStr = document.getElementById(&apos;aqi-city-input&apos;).value.trim();</div><div class="line">    var numStr = document.getElementById(&apos;aqi-value-input&apos;).value.trim();</div><div class="line"></div><div class="line">    if(!cityStr.match(/^[A-Za-z\u4E00-\u9FA5]+$/))&#123;</div><div class="line">        alert(&apos;城市名称必须为汉字或英文字符！&apos;);</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    if(!numStr.match(/^\d+$/))&#123;</div><div class="line">        alert(&apos;空气质量指数必须是整数&apos;);</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    aqiData[cityStr]  = numStr;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在任务16中我们需要为每一个项绑定删除事件。这时，我们要用到事件代理，由于事件会在冒泡阶段向上传播到父节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件。这种方法叫做事件的代理（delegation）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var table =document.getElementById(&apos;aqi-table&apos;);</div><div class="line">table.addEventListener(&apos;click&apos;,function(event)&#123;</div><div class="line">    if(event.target &amp;&amp; event.target.nodeName === &apos;BUTTON&apos;)&#123;</div><div class="line">        delBtnHandle(event.target);</div></pre></td></tr></table></figure></p>
<p>上面代码的click事件的监听函数定义在<table>节点，但是实际上，它处理的是子节点<td>的click事件。这样做的好处是，只要定义一个监听函数，就能处理多个子节点的事件，而且以后再添加子节点，监听函数依然有效。</td></table></p>
<h2 id="文章参考"><a href="#文章参考" class="headerlink" title="文章参考"></a>文章参考</h2><p><a href="http://javascript.ruanyifeng.com/" target="_blank" rel="external">JavaScript 标准参考教程（alpha）</a><br><a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="external">MDN javascript</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;文章为百度前端技术学院2016年任务 13-21 的笔记，大概是 Jvascript 基础部分。总结了一些收获，记述了其中遇到的问题和困难，
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://chenyixin.win/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>利用 jQuery 实现一个清单列表小应用</title>
    <link href="http://chenyixin.win/2017/02/23/title-%20%E4%BD%BF%E7%94%A8%20jQuery%20%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E4%BB%BB%E5%8A%A1%E6%B8%85%E5%8D%95%E5%B0%8F%E5%BA%94%E7%94%A8%20/"/>
    <id>http://chenyixin.win/2017/02/23/title- 使用 jQuery 实现一个任务清单小应用 /</id>
    <published>2017-02-23T10:13:30.967Z</published>
    <updated>2017-07-17T12:19:30.770Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>利用 jQuery 做了一个任务清单的网页小应用，实现了其中的一些基本功能。进一步熟悉了 jQuery 的一些基本的操作和方法。第一次使用了 local storage，不过使用了相关的库Store.js。对本地存储的数据保存方式以及JSON还得再抽个时间学一下，算是知其然不知其所以然。遇到了不小的困难，主要存在于下面两个方面：数据的存储和基本概念的理解。意外的收获是学会了利用console.log的检查代码bug。这篇文章主要记述过程和思路，以及一些写代码过程中的反思。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><img src="http://ohqryljkl.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170223144241.png" alt="脑图"></p>
<h3 id="困难与反思"><a href="#困难与反思" class="headerlink" title="困难与反思"></a>困难与反思</h3><p>假如我在写这篇文章之前先画出一个脑图整理思路的话 (上面这个图是后面整理的 )，我想遇到的问题可能会少很多。假如一上来对要实现的功能的逻辑没有清晰的思路，我发现时间大多数都用来修复函数调用等等所出现的 bug 上面了。而且，假如逻辑清晰，思路很明了的话修复bug的也会变的很快。我想下次再写，一定先要把逻辑搞清楚。比如要实现其中的提交Task功能。</p>
<ul>
<li>首先我们需要监听提交按钮，是否输入了内容</li>
<li>假如没有或为空则返回，否则</li>
<li>将输入的值推入 Task 列表</li>
<li>然后更新数据</li>
<li>渲染 Task 列表</li>
<li>在渲染的过程中用循环去遍历每个Task</li>
<li>判断单个Task是否已经完成</li>
<li>已完成的渲染已完成的CSS样式</li>
<li>未完成的渲染未完成的结构和样式</li>
<li>监听其他操作</li>
</ul>
<p>有个清晰的逻辑我们就可以利用Jquery来去实现这个功能了。</p>
<ul>
<li>我们需要监听提交按钮，我们可以用jquery 的<code>.on()</code>来添加点击事件，将点击触发的函数可以单独来写</li>
<li>我们可以利用<code>.find()</code>来查找input按钮，将val()得到的值复制给变量</li>
<li>将新得到的Task利用<code>.push()</code>给需要渲染的任务列表</li>
<li>写一个刷新数据的函数，将Task列表传入随后再调用我们的渲染函数</li>
<li>渲染函数中我们利用<code>for</code>循环来首先判断每个Task的状态分别来渲染</li>
<li>将渲染好的内容利用<code>prepend</code>或者<code>append</code>结构中区</li>
<li>监听其他事件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">//部分代码，点击 [TODO](https://github.com/CChenYixin/JavaScript_demo/tree/master/demo_MY%20TODO) 访问完整代码。</div><div class="line"></div><div class="line"></div><div class="line">$form_add_task.on(&apos;submit&apos;,on_add_task_form_submit);</div><div class="line"></div><div class="line">//监听提交按钮并添加事件</div><div class="line">function on_add_task_form_submit(e)&#123;</div><div class="line">    var new_task=&#123;&#125;,$input;</div><div class="line">    //禁用默认行为</div><div class="line">    e.preventDefault();</div><div class="line">    //获取新task的值</div><div class="line">    $input = $(this).find(&apos;input[name=content]&apos;);</div><div class="line">    new_task.content =  $input.val();</div><div class="line">    //如果新task的值为空则返回，否则继续执行</div><div class="line">    if(!new_task.content) return;</div><div class="line">    // 存入新task</div><div class="line">    task_list.push(new_task);</div><div class="line">    if(add_task(new_task))&#123;</div><div class="line">        // render_task_list();</div><div class="line">        $input.val(null);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//添加task</div><div class="line">function add_task(new_task)&#123;</div><div class="line">    //更新localstrage</div><div class="line">    refresh_task_list();</div><div class="line">    // console.log(&apos;task_list&apos;,task_list);</div><div class="line">    return true;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//更新localstroage并刷新</div><div class="line">function refresh_task_list () &#123;</div><div class="line">      store.set(&apos;task_list&apos;, task_list);</div><div class="line">      render_task_list();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">//渲染task列表</div><div class="line">function render_task_list()&#123;</div><div class="line">  // console.log(&apos;1&apos;,1);</div><div class="line">  // console.log(&apos;task_list&apos;,task_list);</div><div class="line">  var $task_list=$(&apos;.task-list&apos;);</div><div class="line">  $task_list.html(&apos;&apos;);</div><div class="line">  var complete_items =[];</div><div class="line"></div><div class="line">  for(var i = 0;i&lt;task_list.length;i++)&#123;</div><div class="line">      var item = task_list[i];</div><div class="line">      if(item &amp;&amp; item.complete)&#123;</div><div class="line">          complete_items.push(item);</div><div class="line">          var $complete_task = render_task_item(item,i);</div><div class="line">          if(!$complete_task) continue;</div><div class="line">          $complete_task.addClass(&quot;completed&quot;);</div><div class="line">          $task_list.append($complete_task);</div><div class="line">      &#125;else&#123;</div><div class="line">          $task = render_task_item(item,i);</div><div class="line">          $task_list.prepend($task);</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">  $task_delete_trigger = $(&apos;.action.delete&apos;);</div><div class="line">  $task_detail_trigger= $(&apos;.action.detail&apos;);</div><div class="line">  $checkbox_complete = $(&apos;.complete&apos;);</div><div class="line">  listen_task_delete();</div><div class="line">  listen_task_detail();</div><div class="line">  listen_checkbox_complete();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">  function render_task_item(data,index)&#123;</div><div class="line">      if(!data||!index) return;</div><div class="line">      var list_item_item = &apos;&lt;div class=&quot;task-item&quot; data-index=&quot;&apos;+ index +&apos;&quot;&gt;&apos;+</div><div class="line">              &apos;&lt;span&gt;&lt;input class=&quot;complete&quot;&apos; + ( data.complete ? &apos;checked&apos;:&apos;&apos;) +&apos; type=&quot;checkbox&quot;&gt;&lt;/span&gt;&apos;+</div><div class="line">              &apos;&lt;span class=&quot;text-content&quot;&gt;&apos;+ data.content + &apos;&lt;/span&gt;&apos;+</div><div class="line">              &apos;&lt;span class=&quot;action delete&quot;&gt;删除&lt;/span&gt;&apos;+</div><div class="line">              &apos;&lt;span class=&quot;action detail&quot;&gt;详细&lt;/span&gt;&apos;+</div><div class="line">          &apos;&lt;/div&gt;&apos;;</div><div class="line">      return $(list_item_item);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="bug-和反思"><a href="#bug-和反思" class="headerlink" title="bug 和反思"></a>bug 和反思</h3><p>逻辑清晰的找bug也会快一点。尤其是可以利用<code>console.log()</code>的方式。除去那些依靠JShint就可以排查的bug，首先我们可以先确定bug产生的大体范围，根据逻辑顺序，来打印<code>console.log()</code>;一步步的来测试就可以精准的确定bug产生的原因。不过暂时不知道那些动辄上万行代码是如何debug的，查找资料的时候发现chrome自带断点测试，也要抽时间来学习一下。</p>
<h3 id="npm的使用"><a href="#npm的使用" class="headerlink" title="npm的使用"></a>npm的使用</h3><p>npm 是 Node 的模块管理器，功能极其强大。我们根据一行命令，就能安装别人写好的模块。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm install &lt;packageName&gt;</div><div class="line">//卸载</div><div class="line">$ npm uninstall express</div></pre></td></tr></table></figure>
<p>模块的安装过程如下：</p>
<ul>
<li>发出npm install命令</li>
<li>npm 向 registry 查询模块压缩包的网址</li>
<li>下载压缩包，存放在~/.npm目录</li>
<li>解压压缩包到当前项目的node_modules目录</li>
</ul>
<p>我们可以在安装的时候加上<code>--save-dev</code>：</p>
<blockquote>
<p>当你为你的模块安装一个依赖模块时，正常情况下你得先安装他们（在模块根目录下npm install module-name），然后连同版本号手动将他们添加到模块配置文件package.json中的依赖里（dependencies）。<br>-save和save-dev可以省掉你手动修改package.json文件的步骤。<br>spm install module-name -save 自动把模块和版本号添加到dependencies部分<br>spm install module-name -save-dve 自动把模块和版本号添加到devdependencies部分</p>
</blockquote>
<p>在使用npm感觉很方便，另外想到的还是必须要学习git，虽然再学习初期为了节省时间用了github的客户端来上传代码，但是最终用的还是git，而且用git会更加节省时间。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>写代码前有一个清晰的逻辑。</li>
<li>基础概念的掌握和理解是最重要的没有之一。</li>
<li>要抽时间深度掌握 git,JSON,以及是改学学后端的一些知识了，至少要熟悉借口之类的。</li>
</ul>
<p>感觉最近的学习有点懈怠了，要加油。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;利用 jQuery 做了一个任务清单的网页小应用，实现了其中的一些基本功能。进一步熟悉了 jQuery 的一些基本的操作和方法。第一次使用了
    
    </summary>
    
    
      <category term="jQuery" scheme="http://chenyixin.win/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>立即执行函数表达式 IIFE</title>
    <link href="http://chenyixin.win/2017/01/18/title-%20%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%20IIFE%20/"/>
    <id>http://chenyixin.win/2017/01/18/title- 立即执行函数 IIFE /</id>
    <published>2017-01-18T12:23:09.015Z</published>
    <updated>2017-07-17T12:18:43.264Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>有半个月没有写文章，原因是作为一名前端新手 Javascript 中有太多太多的概念，最近大概开始对近段时间的学习一些知识的总结。本篇文章分为两个部分阐述常常会遇到和使用的立即执行函数 IIFE ，分别是立即执行函数是什么，以及为什么会使用这个函数。</p>
<h2 id="立即执行函数-IIFE-是什么？"><a href="#立即执行函数-IIFE-是什么？" class="headerlink" title="立即执行函数 IIFE 是什么？"></a>立即执行函数 IIFE 是什么？</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>类似于下面这两种形式，当我们在定义了函数之后需要立即调用时，可以通过加 () 的方式来调用函数。但是，由于<code>function</code>这个关键字即可以被当做语句，也可以当做表达式。所以为了避免解析上的歧义，JavaScript引擎规定，如果function关键字出现在行首，一律解释成语句。所以我们不能在函数定义后直接加 () 来立即调用它，而最简单的办法就是将<code>function</code>放在一个()中让引擎将其理解成一个表达式。这种可以立即调用函数的方法被称作“立即调用的函数表达式”（Immediately-Invoked Function Expression），简称IIFE。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// 函数声明</div><div class="line">function f() &#123;&#125;</div><div class="line"></div><div class="line">// 函数表达式</div><div class="line">var f = function f() &#123;&#125;</div><div class="line"></div><div class="line">// SyntaxError: Unexpected token (</div><div class="line">function()&#123; /* code */ &#125;();</div><div class="line"></div><div class="line">//IIFE</div><div class="line">(function()&#123; /* code */ &#125;());</div><div class="line">(function()&#123; /* code */ &#125;)();</div></pre></td></tr></table></figure>
<h3 id="具体分析"><a href="#具体分析" class="headerlink" title="具体分析"></a>具体分析</h3><p>首先，我们分析普通的函数声明和调用方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// 声明函数f1</div><div class="line">function f1() &#123;</div><div class="line">    console.log(&quot;f1&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 通过()来调用此函数</div><div class="line">f1();</div><div class="line"></div><div class="line">// 或者</div><div class="line">// 建立匿名函数并赋予变量f2</div><div class="line">var f2 = function() &#123;</div><div class="line">    console.log(&quot;f2&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 通过()来调用此函数</div><div class="line">f2();</div></pre></td></tr></table></figure></p>
<p>这两种方式都是用显示的方式声明函数，然后在函数名之后通过 () 来调用，自然而然，我们回想是不是可以类似直接调用匿名函数呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">function()&#123; /* code */ &#125;();</div><div class="line">// SyntaxError: Unexpected token (</div></pre></td></tr></table></figure></p>
<p>浏览器会报错：<code>SyntaxError: Unexpected token (</code>，正如在定义部分说过，原因是由于<code>function</code>这个关键字即可以被当做语句，也可以当做表达式。JavaScript 的解释器会默认的将遇到的<code>function</code>关键字当做函数声明语句来进行解释。但是，函数声明的语句是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function name([param] [, param] [..., param]) &#123;</div><div class="line">   statements</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>所以在匿名函数后面直接加 ()的调用方式是用语法错误的。那么我们就需要通过将<code>function</code>放在一个()中的形式让解释器把()中的内容当作表达式去执行这样就能避免错误，其中我们最常见最常使用的方式有下面两种：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//方法一</div><div class="line">(function()&#123; /* code */ &#125;)();</div></pre></td></tr></table></figure>
<p>由于把函数的声明写在了()之中，所以解释器以表达式（expression）来解析其中代码而不会抛出错误，<strong>当我们直接向 () 中传入声明函数会直接返回此函数</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// 如果传入字面量（literal），则返回表达式（expression）</div><div class="line">(1) // 1    </div><div class="line">(function()&#123;console.log(&quot;f&quot;);&#125;) // function () &#123;console.log(&quot;f&quot;)&#125;</div></pre></td></tr></table></figure></p>
<p>所以方法一其实就是我们调用函数的通用方式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//方法二</div><div class="line">(function()&#123; /* code */ &#125;());</div></pre></td></tr></table></figure></p>
<p>方法二就更容易理解直接把()中的内容当作表达式来进行解释。和方法一在结果上没有什么区别。以上便是具体分析的过程。</p>
<h2 id="为什么使用立即执行函数表达式-IIFE？"><a href="#为什么使用立即执行函数表达式-IIFE？" class="headerlink" title="为什么使用立即执行函数表达式 IIFE？"></a>为什么使用立即执行函数表达式 IIFE？</h2><ul>
<li>传统的方法比较，定义和执行分开写</li>
<li>传统的方法直接污染全局命名空间（浏览器里的 global 对象，如 window）</li>
</ul>
<p>在JavaScript没有块作用域（block），只有函数作用域，在同时调用多个库的情况下，很容易造成对象或者变量的覆盖，而在IIFE内部会形成一个单独的作用域，可以封装一些外部无法读取的私有变量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">// 创建一个立即调用的匿名函数表达式</div><div class="line">// return一个变量，其中这个变量里包含你要暴露的东西</div><div class="line">// 返回的这个变量将赋值给counter，而不是外面声明的function自身</div><div class="line"></div><div class="line">var counter = (function () &#123;</div><div class="line">    var i = 0;</div><div class="line"></div><div class="line">    return &#123;</div><div class="line">        get: function () &#123;</div><div class="line">            return i;</div><div class="line">        &#125;,</div><div class="line">        set: function (val) &#123;</div><div class="line">            i = val;</div><div class="line">        &#125;,</div><div class="line">        increment: function () &#123;</div><div class="line">            return ++i;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125; ());</div><div class="line"></div><div class="line">// counter是一个带有多个属性的对象，上面的代码对于属性的体现其实是方法</div><div class="line"></div><div class="line">counter.get(); // 0</div><div class="line">counter.set(3);</div><div class="line">counter.increment(); // 4</div><div class="line">counter.increment(); // 5</div><div class="line"></div><div class="line">counter.i; // undefined 因为i不是返回对象的属性</div><div class="line">i; // 引用错误: i 没有定义（因为i只存在于闭包）</div></pre></td></tr></table></figure></p>
<h2 id="函数声明和函数表达式"><a href="#函数声明和函数表达式" class="headerlink" title="函数声明和函数表达式"></a>函数声明和函数表达式</h2><p>要理解立即执行函数，最关键的是需要理解函数声明、函数表达式的基本概念和区别。</p>
<p>函数声明 (function 语句):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function name([param[, param[, ... param]]]) &#123;</div><div class="line">   statements</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>name：函数名；<br>param：被传入函数的参数的名称,一个函数最多可以有255个参数；<br>statements：这些语句组成了函数的函数体。</p>
<p>函数表达式 (function expression):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function [name]([param] [, param] [..., param]) &#123;</div><div class="line">   statements</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>name：函数名,<strong>可以省略,省略函数名的话,该函数就成为了匿名函数；</strong><br>param：被传入函数的参数的名称,一个函数最多可以有255个参数；<br>statements：这些语句组成了函数的函数体。</p>
<p>虽然都可以定义函数，但最大的区别在于：<br>解析器会率先读取函数声明，使其在执行任何代码之前就可以访问（也就是 函数声明提升）；<br>而函数表达式则需要解析器执行到它所在的代码行才会被解释执行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function test() &#123;</div><div class="line">    foo();</div><div class="line"></div><div class="line">    function foo() &#123;</div><div class="line">        alert(&quot;我是会出现的啦……&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">test();</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function test() &#123;</div><div class="line">    foo();</div><div class="line"></div><div class="line">    var foo = function() &#123;</div><div class="line">        alert(&quot;我不会出现的哦……&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">test();</div><div class="line">`</div></pre></td></tr></table></figure>
<p>在上面的第一个例子中foo()是一个声明，函数声明会被提升，函数声明会连通命名和函数体一起被提升至作用域顶部，在执行 foo() 之前，作用域就知道函数 foo 的存在了。随意例子中的 alert 会被显示出来。而在例子二中由于foo()是函数表达式， 在执行 foo() 之前，作用域只知道 foo 的命名，不知道它到底是什么，所以执行会报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;TypeError: foo is not a function</div></pre></td></tr></table></figure></p>
<p>函数表达式只有命名会被提升，定义的函数体则不会。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://segmentfault.com/a/1190000000327820" target="_blank" rel="external">JavaScript中的立即执行函数表达式</a><br><a href="http://javascript.ruanyifeng.com/grammar/function.html#toc24" target="_blank" rel="external">JavaScript标准教程参考 —— 阮一峰</a><br><a href="https://segmentfault.com/a/1190000003746581" target="_blank" rel="external">函数声明与定义，作用域，函数声明与表达式的区别</a><br><a href="https://segmentfault.com/a/1190000005039150" target="_blank" rel="external">深入浅出JavaScript：定义函数（函数声明&amp;函数表达式）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;有半个月没有写文章，原因是作为一名前端新手 Javascript 中有太多太多的概念，最近大概开始对近段时间的学习一些知识的总结。本篇文章分
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://chenyixin.win/tags/JavaScript/"/>
    
      <category term="IIFE" scheme="http://chenyixin.win/tags/IIFE/"/>
    
  </entry>
  
  <entry>
    <title>分别利用 JavaScript 和 CSS 实现tab选项卡切换</title>
    <link href="http://chenyixin.win/2017/01/03/title-%20%E5%88%86%E5%88%AB%E5%88%A9%E7%94%A8%20JavaScript%20%E5%92%8C%20CSS%20%E5%AE%9E%E7%8E%B0tab%E9%80%89%E9%A1%B9%E5%8D%A1%E5%88%87%E6%8D%A2/"/>
    <id>http://chenyixin.win/2017/01/03/title- 分别利用 JavaScript 和 CSS 实现tab选项卡切换/</id>
    <published>2017-01-03T12:46:08.932Z</published>
    <updated>2017-07-17T12:17:43.830Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>大概是一次概念整理，原本这个是慕课进阶后面的编程练习，通过这个选项卡切换的小实例理清了原本对 JavaScript 概念的一些错误认识，顺便复习了一下利用 CSS 制作tab选项卡的过程，所以大概整理了一下写成文章。另外尽管如此，这个练习后还是存在一个问题：就是关于JavaScript中的 <code>this</code> 的使用问题，尽管了解了关键字 this 总是指向调用该方法的对象，但是这较为抽象的概念在实际运用和理解中还是有点问题，暂时还没有解决，特此记录下。可以这个需要大量的练习才可能摸清<code>this</code>的真正概念和使用方法吧。<strong>17年1月18号更新：文章写于刚开始学习JS时，文中方法二 Javascript 与 CSS 耦合是一种并不合适的写法。</strong></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="CSS-实现tab选项卡切换"><a href="#CSS-实现tab选项卡切换" class="headerlink" title="CSS 实现tab选项卡切换"></a>CSS 实现tab选项卡切换</h3><p>效果如下：</p>
<p><img src="http://ohqryljkl.bkt.clouddn.com/tab.gif" alt="效果如下"></p>
<p>HTML部分：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">div id=&quot;tabs&quot;&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">        &lt;li&gt;</div><div class="line">            &lt;input type=&quot;radio&quot; name=&quot;nav&quot; id=&quot;nav1&quot; checked&gt; /*核心代码*/</div><div class="line">            &lt;label for=&quot;nav1&quot;&gt;房产&lt;/label&gt;</div><div class="line">            &lt;div class=&quot;tab tab1&quot;&gt;</div><div class="line">                275万购昌平邻铁三居 总价20万买一居&lt;br/&gt;200万内购五环三居 140万安家东三环&lt;br/&gt;北京首现零首付楼盘 53万购东5环50平&lt;br/&gt;京楼盘直降5000 中信府 公园楼王现房</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/li&gt;</div><div class="line">        &lt;li&gt;</div><div class="line">            &lt;input type=&quot;radio&quot; name=&quot;nav&quot; id=&quot;nav2&quot;&gt;</div><div class="line">            &lt;label for=&quot;nav2&quot;&gt;家具&lt;/label&gt;</div><div class="line">            &lt;div class=&quot;tab tab2&quot;&gt;</div><div class="line">                40平出租屋大改造 美少女的混搭小窝&lt;br/&gt;经典清新简欧爱家 90平老房焕发新生&lt;br/&gt;新中式的酷色温情 66平撞色活泼家居&lt;br/&gt;瓷砖就像选好老婆 卫生间烟道的设计</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/li&gt;</div><div class="line">        &lt;li&gt;</div><div class="line">            &lt;input type=&quot;radio&quot; name=&quot;nav&quot; id=&quot;nav3&quot;&gt;</div><div class="line">            &lt;label for=&quot;nav3&quot;&gt;二手房&lt;/label&gt;</div><div class="line">            &lt;div class=&quot;tab tab3&quot;&gt;</div><div class="line">                通州豪华3居260万 二环稀缺2居250w甩&lt;br/&gt;西3环通透2居290万 130万2居限量抢购&lt;br/&gt;黄城根小学学区仅260万 121平70万抛!&lt;br/&gt;独家别墅280万 苏州桥2居优惠价248万</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>对于这种类似与选项卡的内容，最好利用 <code>ul</code> 和 <code>li</code> 把对应tab下的内容放在一起。在这个选项卡切换的 HTML 核心部分：首先，我们要实现点击tab实现相关内容的切换，这就需要用到<code>input</code>元素以及其相关的属性<code>name</code>，对于一组<code>input</code>单选按钮，我们需要设置它们的<code>name</code>为相同的值，确保当选中其中一个时，其他的不会被选中。其次，我们需要用到<code>label</code>，<code>label</code>元素不会向用户呈现任何特殊的样式。不过，它为鼠标用户改善了可用性，因为如果用户点击 label 元素内的文本，则会切换到控件本身。这样我们就可以隐藏<code>input</code>元素了，点击<code>label</code>区域就可以了，<code>label</code>标签的 for 属性应该等于<code>input</code>的 id 元素，以便将它们捆绑起来。这样HTML的核心部分基本设置好了，另外给第一个<code>input</code>设置<code>checked</code>保证其在选中状态。不然后面CSS部分<code>display</code>设置都为 none 后页面载入空空如也。</p>
<p>CSS 部分(只标注了核心部分)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">&lt;style media=&quot;screen&quot;&gt;</div><div class="line">    ...</div><div class="line">    #tabs ul li .tab &#123;</div><div class="line">        display: none; /*核心代码*/</div><div class="line">        position: absolute;</div><div class="line">        width: 300px;</div><div class="line">        height: 100px;</div><div class="line">        top: 30px;</div><div class="line">        left: 0;</div><div class="line">        text-align: center;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    #tabs ul li input &#123;</div><div class="line">        display: none;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    #tabs ul li label &#123;</div><div class="line">        display: inline-block;</div><div class="line">        text-align: center;</div><div class="line">        float: left;</div><div class="line">        width: 100px;</div><div class="line">        height: 30px;</div><div class="line">        line-height: 30px;</div><div class="line">        background-color: #eee;</div><div class="line">        cursor: pointer;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    #tabs ul label:hover &#123;    </div><div class="line">        background-color: #666;</div><div class="line">        color: white;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    #tabs ul li [id^=&apos;nav1&apos;]:checked~.tab1 &#123;</div><div class="line">        display: block;  /*核心代码*/</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    #tabs ul li [id^=&apos;nav2&apos;]:checked~.tab2 &#123;</div><div class="line">        display: block; /*核心代码*/</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    #tabs ul li [id^=&apos;nav3&apos;]:checked~.tab3 &#123;</div><div class="line">        display: block; /*核心代码*/</div><div class="line">    &#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure></p>
<p>我们的核心思想是：当相应 tab 的<code>label</code>被点击时候，该 tab 对应的 div 展示。为此，首先我们将tab对应的 div 部分设置为 <code>display = none;</code>  然后来实现我们的效果：点击展示。这部分我们要利用 CSS 选择器来实现。<br>首先，我们利用 <code>[attribute^=value]</code>选择器来选择相应的 <code>input</code>选择，然后使用 <code>:checked</code> （这个是必要的）选择器选择状态为选中状态的<code>input</code>元素，再利用<code>~</code>选择器，选择相应的div的类名。到此为止，利用CSS实现选项卡的切换就已经完成了，总结下核心就是利用选择器选中相应的<code>input</code>实现对应div的展现。</p>
<h3 id="JavaScript-实现tab选项卡切换"><a href="#JavaScript-实现tab选项卡切换" class="headerlink" title="JavaScript 实现tab选项卡切换"></a>JavaScript 实现tab选项卡切换</h3><h4 id="方法一：利用style语法"><a href="#方法一：利用style语法" class="headerlink" title="方法一：利用style语法"></a>方法一：利用style语法</h4><p>效果依旧：</p>
<p><img src="http://ohqryljkl.bkt.clouddn.com/tab.gif" alt="效果如下"></p>
<p>HTML部分：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;tabs&quot;&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">        &lt;li&gt;房产&lt;/li&gt;</div><div class="line">        &lt;li&gt;家具&lt;/li&gt;</div><div class="line">        &lt;li&gt;二手房&lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">    &lt;div class=&quot;con&quot;&gt;</div><div class="line">        &lt;div&gt;</div><div class="line">            275万购昌平邻铁三居 总价20万买一居&lt;br/&gt;200万内购五环三居 140万安家东三环&lt;br/&gt;北京首现零首付楼盘 53万购东5环50平&lt;br/&gt;京楼盘直降5000 中信府 公园楼王现房</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;div&gt;</div><div class="line">            40平出租屋大改造 美少女的混搭小窝&lt;br/&gt;经典清新简欧爱家 90平老房焕发新生&lt;br/&gt;新中式的酷色温情 66平撞色活泼家居&lt;br/&gt;瓷砖就像选好老婆 卫生间烟道的设计</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;div&gt;</div><div class="line">            通州豪华3居260万 二环稀缺2居250w甩&lt;br/&gt;西3环通透2居290万 130万2居限量抢购&lt;br/&gt;黄城根小学学区仅260万 121平70万抛!&lt;br/&gt;独家别墅280万 苏州桥2居优惠价248万</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>首先，上面这个部分div <code>class=&quot;con&quot;</code>这个不是必要的，只是为了练习JS额外添加的一层。HTML和CSS 部分没什么好说的，因为不需要CSS来控制，我们可以把内容div部分和tab部分分开。</p>
<p>JavaScript部分：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    window.onload = function() &#123;</div><div class="line">        var oTab = document.getElementById(&quot;tabs&quot;);</div><div class="line">        var oUl = oTab.getElementsByTagName(&quot;ul&quot;)[0];</div><div class="line">        var oLis = oUl.getElementsByTagName(&quot;li&quot;);</div><div class="line">        var ocon = document.getElementsByClassName(&quot;con&quot;)[0];</div><div class="line">        var oDivs = ocon.getElementsByTagName(&quot;div&quot;);</div><div class="line"></div><div class="line">        for (var i = 0, len = oLis.length; i &lt; len; i++) &#123;</div><div class="line">            oLis[i].index = i;</div><div class="line">            oLis[i].onclick = function() &#123;</div><div class="line">                for (var n = 0; n &lt; len; n++) &#123;</div><div class="line">                    oDivs[n].style.display = &quot;none&quot;;</div><div class="line">                &#125;</div><div class="line">                oDivs[this.index].style.display = &quot;block&quot;;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>我们需要的效果是选择tab标签展现相应的内容，为此我们要获得相应的li和其div；这时候我们就需要用到这一大推方法：</p>
<ul>
<li>getElementById()：返回对拥有指定 id 的第一个对象的引用。</li>
<li>getElementsByTagName()：返回带有指定标签名的对象集合。</li>
<li>getElementsByClassName()    返回包含带有指定类名的所有元素的节点列表。</li>
</ul>
<p>需要注意的是，后面两个方法返回都是一个集合，所以上面JS代码中赋值时需要注意到底是需要这个集合还是这个集合中某个元素。这也是上面这两个方法后面添加[0]的原因。接下是代码的核心部分，我们需要的效果选择相应的tab标签展现相应的内容，转化为代码就是：选择其中一个，其他的隐藏。</p>
<p>我们利用<code>for</code>循环来实现这个效果，首先我们给<code>li</code>的集合建立索引，其次在<code>for</code>循环中建立 onclick事件 ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">oLis[i].onclick = function() &#123;</div><div class="line">    for (var n = 0; n &lt; len; n++) &#123;</div><div class="line">        oDivs[n].style.display = &quot;none&quot;;</div><div class="line">    &#125;</div><div class="line">    oDivs[this.index].style.display = &quot;block&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>函数中的循环表示：所有div的 <code>display:none;</code>,然后函数外利用关键字 this （关键字 this 总是指向调用该方法的对象）来调用相应被点击了的div，再使用<code>style</code>语法让<code>display</code>设置为<code>block</code>。</p>
<p><strong>换句话说：内层循环表示，第一次遍历li，让所有的li的dislay设置为none；内层循环结束，然后再给当前被选的li的dispaly赋值为block；</strong></p>
<h4 id="方法二：利用className-和CSS配合"><a href="#方法二：利用className-和CSS配合" class="headerlink" title="方法二：利用className 和CSS配合"></a>方法二：利用className 和CSS配合</h4><p>HTML部分：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;tabs&quot;&gt;</div><div class="line">     &lt;ul&gt;</div><div class="line">         &lt;li&gt;房产&lt;/li&gt;</div><div class="line">         &lt;li&gt;家具&lt;/li&gt;</div><div class="line">         &lt;li&gt;二手房&lt;/li&gt;</div><div class="line">     &lt;/ul&gt;</div><div class="line">     &lt;div class=&quot;con&quot;&gt;</div><div class="line">         &lt;div&gt;</div><div class="line">             275万购昌平邻铁三居 总价20万买一居&lt;br/&gt;200万内购五环三居 140万安家东三环&lt;br/&gt;北京首现零首付楼盘 53万购东5环50平&lt;br/&gt;京楼盘直降5000 中信府 公园楼王现房</div><div class="line">         &lt;/div&gt;</div><div class="line">         &lt;div class=&quot;hide&quot;&gt;</div><div class="line">             40平出租屋大改造 美少女的混搭小窝&lt;br/&gt;经典清新简欧爱家 90平老房焕发新生&lt;br/&gt;新中式的酷色温情 66平撞色活泼家居&lt;br/&gt;瓷砖就像选好老婆 卫生间烟道的设计</div><div class="line">         &lt;/div&gt;</div><div class="line">         &lt;div class=&quot;hide&quot;&gt;</div><div class="line">             通州豪华3居260万 二环稀缺2居250w甩&lt;br/&gt;西3环通透2居290万 130万2居限量抢购&lt;br/&gt;黄城根小学学区仅260万 121平70万抛!&lt;br/&gt;独家别墅280万 苏州桥2居优惠价248万</div><div class="line">         &lt;/div&gt;</div><div class="line">     &lt;/div&gt;</div><div class="line"> &lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>CSS部分：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.../*省略*/</div><div class="line">.hide &#123;</div><div class="line">    display: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>JavaScript部分：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    window.onload = function() &#123;</div><div class="line">        var oTab = document.getElementById(&quot;tabs&quot;);</div><div class="line">        var oUl = oTab.getElementsByTagName(&quot;ul&quot;)[0];</div><div class="line">        var oLis = oUl.getElementsByTagName(&quot;li&quot;);</div><div class="line">        var ocon = document.getElementsByClassName(&quot;con&quot;)[0];</div><div class="line">        var oDivs = ocon.getElementsByTagName(&quot;div&quot;);</div><div class="line"></div><div class="line">        for (var i = 0, len = oLis.length; i &lt; len; i++) &#123;</div><div class="line">            /*定义一个index属性对aBtn进行编号*/</div><div class="line">            oLis[i].index = i;</div><div class="line">            oLis[i].onclick = function() &#123;</div><div class="line">                for (var n = 0; n &lt; len; n++) &#123;</div><div class="line">                    /*这里是相对于未被点击的部分的样式*/</div><div class="line">                    oDivs[n].className = &quot;hide&quot;;</div><div class="line">                &#125;</div><div class="line">                	/*通过之前的index编号绑定指定的div文本*/</div><div class="line">                oDivs[this.index].className = &quot;&quot;;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>和方法一基本上类似，CSS部分首相将其他两个隐藏，然后实现用JS代码实现选择其中一个，其他的隐藏。不过在设置的部分利用的<code>className</code>属性来设置。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://www.w3school.com.cn/js/pro_js_object_scope.asp" target="_blank" rel="external">ECMAScript 对象作用域</a><br><a href="http://www.w3school.com.cn/js/js_htmldom_css.asp" target="_blank" rel="external"> HTML DOM - 改变 CSS</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;大概是一次概念整理，原本这个是慕课进阶后面的编程练习，通过这个选项卡切换的小实例理清了原本对 JavaScript 概念的一些错误认识，顺便
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://chenyixin.win/tags/JavaScript/"/>
    
      <category term="CSS" scheme="http://chenyixin.win/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>移动 Web 开发小记</title>
    <link href="http://chenyixin.win/2016/12/27/title-%20%E7%A7%BB%E5%8A%A8%20Web%20%E5%BC%80%E5%8F%91%E5%B0%8F%E8%AE%B0%20/"/>
    <id>http://chenyixin.win/2016/12/27/title- 移动 Web 开发小记 /</id>
    <published>2016-12-27T14:25:33.692Z</published>
    <updated>2017-07-17T12:21:04.085Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>大概记述了初次接触移动 Web 页面布局实践中遇到的一些问题和值得注意的地方。具体包括了移动前端开发基本的概念，移动页面开发相关的一些<code>meta</code>标签，相对单位 rem ，与响应式图片的一些总结。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="移动前端开发的大体印象"><a href="#移动前端开发的大体印象" class="headerlink" title="移动前端开发的大体印象"></a>移动前端开发的大体印象</h3><p>移动前端开发是一个很大的概念，除了基本的前端知识外，还需要掌握一些PPI，像素，DPI等知识，对自己这种小白来说，学习过程中的一大体验就是概念多，还没有有个全局的印象首先被基础概念淹没了。所以个人感觉首先要对移动前端开发有个大体的印象。具体来说的移动前端开发包括了以下几种类型：</p>
<ul>
<li>Native App（ 原生APP ）：完全使用移动设备系统语言写成的客户端。iPhone、iPad 就是纯Object-C，安卓就是纯JAVA, 具有极强的交互性。一般静态资源都是在本地的。浏览使用方便，体验度高。</li>
<li>Web App：在移动设备的浏览器中的应用，不再是操作系统。说白了就是一个触屏版的网页，只能在浏览器中打开。资源一般都在网络上，IOS支持可以在桌面创建访问的快捷方式。</li>
<li>Hybrid App：用原生系统语言写了个容器，然后在里面运行 web 页面，资源一般在本地或者网络都可以。</li>
</ul>
<h3 id="移动前端开发中的-meta-元素"><a href="#移动前端开发中的-meta-元素" class="headerlink" title="移动前端开发中的 meta 元素"></a>移动前端开发中的 meta 元素</h3><h4 id="meta-元素"><a href="#meta-元素" class="headerlink" title="meta 元素"></a>meta 元素</h4><blockquote>
<p>标签提供关于HTML文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。它可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。 —— W3School</p>
</blockquote>
<h4 id="移动设备"><a href="#移动设备" class="headerlink" title="移动设备"></a>移动设备</h4><p><code>viewport</code>可以让布局在移动浏览器上显示的更好，之所有会有要用到 viewport，原因是在移动浏览器中，通常会以一个比屏幕更宽的虚拟的窗口中渲染，从而无需将页面的所有部分压缩到屏幕中（这样会把很多没有针对移动端进行优化的站点打乱）。用户可以通过平移和缩放来浏览页面的不同区域。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0,maximum-scale=1.0, user-scalable=no&quot;/&gt;</div></pre></td></tr></table></figure></p>
<p>其中：</p>
<ul>
<li>content 是 meta 元素中的必要属性，定义与http-equiv或name属性相关的元信息</li>
<li>name 把 content 属性关联到一个名称</li>
<li>initial-scale 为初始的缩放比例，范围从&gt;0 到10</li>
<li>minimum-scale 允许用户缩放到的最小比例</li>
<li>maximum-scale 允许用户缩放到的最大比例</li>
<li>user-scalable 用户是否可以手动缩 (no,yes)</li>
</ul>
<h3 id="相对单位-rem"><a href="#相对单位-rem" class="headerlink" title="相对单位 rem"></a>相对单位 rem</h3><p>rem（font size of the root element）是指相对于根元素的字体大小的单位。通过设置html的字体大小就可以控制rem的大小。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">html &#123;</div><div class="line">    font-size: 62.5%;</div><div class="line">&#125;</div><div class="line">body &#123;</div><div class="line">    font-size: 1.4rem; /* 14px */</div><div class="line">&#125;</div><div class="line">h1 &#123;</div><div class="line">    font-size: 2.4rem; /* 24px */</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对于移动前端开发来说，我们在页面布局中有可能采用宽度百分比，高度用px固定的方式，但在某些屏幕下页面元素可能被拉长导致宽度百分比但高度没变就使得视觉上显示的不协调。要么采用响应式，但这种方式工作大，维护性难。要么采用 viewport 缩放的方式，但也有可能造成在缩放中页面糊掉的情况。这时候我们就可以采用 rem 的方式开适配。 rem不仅仅用于字体，同样也可以应用于宽高，边距等等，这样我们就可以通过设置html的字体大小就可以控制rem的大小。具体的来说，我们可以通过 JS 计算的方式去设置 font-size，因为暂时没有学习 JS ，暂时不做叙述。再者就是采用 media query 的方式来实现适配。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">html &#123;</div><div class="line">    font-size : 20px;</div><div class="line">&#125;</div><div class="line">@media only screen and (min-width: 401px)&#123;</div><div class="line">    html &#123;</div><div class="line">        font-size: 25px !important;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@media only screen and (min-width: 428px)&#123;</div><div class="line">    html &#123;</div><div class="line">        font-size: 26.75px !important;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@media only screen and (min-width: 481px)&#123;</div><div class="line">    html &#123;</div><div class="line">        font-size: 30px !important;</div><div class="line">    &#125;</div><div class="line">&#125;让</div><div class="line">@media only screen and (min-width: 569px)&#123;</div><div class="line">    html &#123;</div><div class="line">        font-size: 35px !important;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@media only screen and (min-width: 641px)&#123;</div><div class="line">    html &#123;</div><div class="line">        font-size: 40px !important;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="弹性图片"><a href="#弹性图片" class="headerlink" title="弹性图片"></a>弹性图片</h3><h4 id="max-width方式"><a href="#max-width方式" class="headerlink" title="max-width方式"></a>max-width方式</h4><p>响应式 web 设计意味着，不仅我们的布局能基于设备特征变化，内容也能。对于图片来说，对于不同的设备，需要拉伸或者收缩图片。这时候我们可以在其中加上如下 CSS 样式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">img&#123;</div><div class="line">    max-width:100%;</div><div class="line">    height:auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>max-width:100%的设置，以确保图像永远不会超越其父容器的宽度。如果父容器的宽度收缩小于图像的宽度，图像将随之缩小。</li>
<li>height:auto的设置可以确保当有这种情况发生时，图像将以自身的宽高比保留。</li>
</ul>
<h4 id="picture方式"><a href="#picture方式" class="headerlink" title="picture方式"></a>picture方式</h4><p><picture>是HTML5一个新的元素。它可以通过使用 media 属性的方式来让浏览器根据当前的页面选择加载最合适的图片大小。</picture></p>
<blockquote>
<p>HTML <picture> 元素是一个容器，用来为其内部特定的 <img> 元素提供多样的 <source> 元素。浏览器会根据当前页面（即图片所在的盒子的容器）的布局以及当前浏览的设备（比如普通的屏幕和高清屏幕）去从中选择最合适的资源。</picture></p>
</blockquote>
<p>文章<a href="http://www.w3cplus.com/html5/quick-tip-how-to-use-html5-picture-for-responsive-images.html" target="_blank" rel="external">如何使用 HTML5 的picture元素处理响应式图片</a>对此有详细的论述，以下内容皆引用自原文：</p>
<p><picture>基本工作步骤如下：</picture></p>
<ul>
<li>创建<picture></picture>标签。</li>
<li>在这些标签内创建一个你想用来执行任何一个特性的<source>元素。</li>
<li>添加一个media属性，用来包含你想要的特性，如视口的当前高度(viewport height)，宽度(width)，方向(orientation)等。</li>
<li>添加一个srcset属性与相应的图像文件名相匹配，进行加载。如果你想提供不同的像素密度，例如Retina显示屏，你可以添加额外的文件名到你的srcset属性中，</li>
<li>添加一个回退的元素。</li>
<li>可以看个简单的例子，用来检查视口是否小于768px，如果小于就加载一个较小的图像：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;picture&gt;</div><div class="line">    &lt;source srcset=&quot;person_small.jpg&quot; media=&quot;(max-width: 768px)&quot;&gt;</div><div class="line">    &lt;source srcset=&quot;person_default.jpg&quot;&gt;</div><div class="line">    &lt;img srcset=&quot;person_default.jpg&quot; alt=&quot;This is King&quot;&gt;</div><div class="line">&lt;/picture&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>可以看到在屏幕&lt;=768px的时候加载的是person_small.jpg<br>当屏幕&gt;768px的时候，加载的是person_default.jpg</p>
<p>不过这是一个实验中的功能，Chrome，Firefox和Opera浏览器都已经实现了对<picture>元素的支持。在不久的将来，在其他浏览器也将得到广泛的支持。</picture></p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://segmentfault.com/a/1190000002407912" target="_blank" rel="external">常用meta整理</a><br><a href="http://www.css88.com/archives/5480" target="_blank" rel="external">移动前端不得不了解的html5 head 头标签</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Mobile/Viewport_meta_tag" target="_blank" rel="external">在移动浏览器中使用viewport元标签控制布局</a><br><a href="http://www.w3cplus.com/html5/quick-tip-how-to-use-html5-picture-for-responsive-images.html" target="_blank" rel="external">如何使用 HTML5 的picture元素处理响应式图片</a><br><a href="https://www.zhihu.com/question/20269059" target="_blank" rel="external">移动前端开发和 Web 前端开发的区别是什么？</a><br><a href="http://alloyteam.github.io/Spirit/modules/Standard/" target="_blank" rel="external">移动开发规范概述</a><br><a href="http://www.alloyteam.com/2016/03/mobile-web-adaptation-tool-rem/" target="_blank" rel="external">移动适配利器 rem</a><br><a href="https://isux.tencent.com/web-app-rem.html" target="_blank" rel="external">web app变革之rem</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;大概记述了初次接触移动 Web 页面布局实践中遇到的一些问题和值得注意的地方。具体包括了移动前端开发基本的概念，移动页面开发相关的一些&lt;co
    
    </summary>
    
    
      <category term="Mobile Web" scheme="http://chenyixin.win/tags/Mobile-Web/"/>
    
  </entry>
  
  <entry>
    <title>IFE task 8-12 笔记</title>
    <link href="http://chenyixin.win/2016/12/26/title-%20IFE%20task%208-12%20%E7%AC%94%E8%AE%B0/"/>
    <id>http://chenyixin.win/2016/12/26/title- IFE task 8-12 笔记/</id>
    <published>2016-12-26T14:07:05.029Z</published>
    <updated>2017-07-17T12:22:47.319Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>文章为百度前端技术学院2016年任务 8-12 的笔记，CSS 部分基本结束。本文大概记述了后半部分任务中的栅格化布局与 Flexfox 布局的一些笔记和需要注意的地方。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="栅格化布局"><a href="#栅格化布局" class="headerlink" title="栅格化布局"></a>栅格化布局</h3><p>栅格化布局的核心是预设好的列宽和媒体查询。具体来说， 首先，我们可以根据需要创建一系列预设好宽度的列，其次，通过设置不同的类名引用它们，最后通过媒体查询来判断具体情况下需要引用哪种样式布局，最终实现不同终端下都能让布局完美展示的响应式设计。比较流行  <a href="http://v3.bootcss.com/css/#forms" target="_blank" rel="external">Bootstrap</a> 就是基于这种简单又实用的设计方式，通过 link 引入的方式可以快速的开发适用于不同设备的响应式 WEB 项目。这里以任务 8 为例结合这篇文章 <a href="http://j4n.co/blog/Creating-your-own-css-grid-system" target="_blank" rel="external">Creating Your Own CSS Grid System</a> 简单的回顾一下栅格化布局需要注意的部分。</p>
<p>一个简单的栅格化布局包括以下部分：</p>
<ol>
<li>容器 - container</li>
<li>行 - rows</li>
<li>列 - columns</li>
<li>间隙 - 列之间的空隙（gutters）</li>
</ol>
<h4 id="容器-container"><a href="#容器-container" class="headerlink" title="容器 - container"></a>容器 - container</h4><p>首先，栅格化布局的页面被包含在一个 .container 容器中，通常情况下宽度为100%，我们也可以通过 <code>max-width</code> 来设置最大的宽度。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.container &#123;</div><div class="line">     width : 100%;</div><div class="line">     max-width : 1200px;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h4 id="行-rows"><a href="#行-rows" class="headerlink" title="行 - rows"></a>行 - rows</h4><blockquote>
<p>行设置的目的是保证列们在它的包裹中而不是溢出到其他行中去。为了达到这个目的，我们需要使用清除浮动的技巧来保证子列们仍旧在这一行中。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.row:before,</div><div class="line">.row:after&#123;</div><div class="line"> content: &quot;&quot;;</div><div class="line"> display: table;</div><div class="line"> clear: both;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="列-columns"><a href="#列-columns" class="headerlink" title="列 - columns"></a>列 - columns</h4><p>列的设置是栅格化布局中最核心的部分之一。首先要将宽度划分为等分的列，可以根据需要设置不同的宽度，在 Bootstrap 框架中预设的列数为12等分。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.col-1 &#123;width: 8.33%;&#125;</div><div class="line">.col-2 &#123;width: 16.66%;&#125;</div><div class="line">.col-3 &#123;width: 25%;&#125;</div><div class="line">.col-4 &#123;width: 33.33%&#125;</div><div class="line">.col-5 &#123;width: 41.66%;&#125;</div><div class="line">.col-6 &#123;width: 50%&#125;</div><div class="line">.col-7 &#123;width: 58.33%;&#125;</div><div class="line">.col-8 &#123;width: 66.66%;&#125;</div><div class="line">.col-9 &#123;width: 75%;&#125;</div><div class="line">.col-10 &#123;width: 83.33%&#125;</div><div class="line">.col-11 &#123;width: 91.66%&#125;</div><div class="line">.col-12 &#123;width: 100%&#125;</div></pre></td></tr></table></figure>
<p>设置好列的宽度后，利用 float 浮动的方式进行布局，如果我们不设置列的高度，那么这些浮动的列将会互相堆叠在前者的上面。为了避免出现这样的情况，我们需要在浮动列的同时给他们一个最小高度1px。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[class*=&apos;col-&apos;]&#123;</div><div class="line"> float: left;</div><div class="line"> min-height: 1px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来我们已经可以引用并进行布局了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;row&quot;&gt;</div><div class="line">    &lt;div class=&quot;col-6&quot;&gt;</div><div class="line">            &lt;span&gt;两栏&lt;/span&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=&quot;col-6&quot;&gt;</div><div class="line">            &lt;span&gt;两栏&lt;/span&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<h4 id="列之间的空隙（gutters）"><a href="#列之间的空隙（gutters）" class="headerlink" title="列之间的空隙（gutters）"></a>列之间的空隙（gutters）</h4><p>在一般的盒模型下，如果我们设置一个宽度为200px，而实际呈现的盒子的宽度可能会大于200px(除非没有左右边框和左右补白)。但是当我们使用了 <code>box-sizing:border-box</code>属性后，假如我们要设置一个宽度为200px的盒子，那么只需要直接设置宽度为200px，当再设置它的左右边框和左右补白后，它的内容区会自动调整。</p>
<p>这就使得我们可以借助border-box模型，轻松设置列之间的空隙。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/*-- setting border box on all elements inside the grid --*/</div><div class="line">.grid-container *&#123;</div><div class="line"> box-sizing: border-box;</div><div class="line">&#125;</div><div class="line"></div><div class="line">[class*=&apos;col-&apos;]&#123;</div><div class="line"> float: left;</div><div class="line"> min-height: 1px;</div><div class="line"> width: 16.66%;</div><div class="line"> /*-- our gutter --*/</div><div class="line"> padding: 12px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="media媒体查询"><a href="#media媒体查询" class="headerlink" title="@media媒体查询"></a>@media媒体查询</h4><p>至此我们便可以通过媒体查询来设置不同设备或屏幕大小下的布局效果了。以任务 8 为例子：<br><img src="http://ohqryljkl.bkt.clouddn.com/1.gif" alt="图片"></p>
<h3 id="Flexbox布局"><a href="#Flexbox布局" class="headerlink" title="Flexbox布局"></a>Flexbox布局</h3><p>不同于栅格化布局利用 CSS 属性实现响应式开发，Flexbox 布局本身是一个布局模块，它包含着父元素 flex container 和子元素 flex items 属性。优点是尤其适合移动端 WEB 网页开发，缺点是在PC端的兼容性上暂时不完全，而且由于本身是一个布局模块所以不需要额外书写CSS样式，相比栅格式布局需要额外书写样式可能带来的渲染时间延长的缺点，Flexbox 十分适合响应式开发。</p>
<p>根据我个人的理解把 Flexbox布局分为两部分理解：轴相关和项目相关。</p>
<h4 id="轴相关"><a href="#轴相关" class="headerlink" title="轴相关"></a>轴相关</h4><ol>
<li><p>使用Flexbox 布局</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">section&#123;</div><div class="line">    display:flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>轴方向 flex-direction<br>设定伸缩容器的主轴的方向，默认 row。</p>
</li>
</ol>
<ul>
<li>row(默认值)：在“ltr”排版方式下从左向右排列；在“rtl”排版方式下从右向左排列。</li>
<li>row-reverse：与row排列方向相反，在“ltr”排版方式下从右向左排列；在“rtl”排版方式下从左向右排列.</li>
<li>column：类似 于row，不过是从上到下排列.</li>
<li>column-reverse：类似于row-reverse，不过是从下到上排列。</li>
</ul>
<ol>
<li>换行 flex-wrap</li>
</ol>
<ul>
<li>nowrap:flex-wrap的默认值，表示的是伸缩容器为单行。侧轴起点方向等同于当前书写模式的起点或前/头在侧轴的那一边，而侧轴终点方向是侧轴起点的相反方向。</li>
<li>wrap：表示的是伸缩容器为多行。侧轴起点方向等同于当前书写模式的起眯或前/头在侧轴的那一边，而侧轴终点方向是侧轴起点的相反方向。</li>
<li>wrap-reverse：除了侧轴起点与侧轴终点方向交换以外同wrap所起作用相同。</li>
</ul>
<ol>
<li><p>主轴 justify-content<br>设置伸缩项目沿主轴的对齐方式，从而调整伸缩项目之间的间距。比较常用的 center 和 space-between。当我们需要让多个块元素在同一水平线上居中的时候，我们就可以用Flexbox 布局迅速让其居中:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.flex-center &#123;</div><div class="line">  display: flex;</div><div class="line">  justify-content: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>侧轴 align-items<br>类似与主轴，设置伸缩项目沿侧轴的对齐方式，比如当我们需要让元素水平垂直局居中时，就可以使用 Flexbox 布局：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.parent &#123;</div><div class="line">  display: flex;</div><div class="line">  justify-content: center;</div><div class="line">  align-items: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="项目相关"><a href="#项目相关" class="headerlink" title="项目相关"></a>项目相关</h4><ol>
<li><p>项目顺序 order<br>默认情况之下，所有的伸缩项目的顺序组都是“0”。我们可以很容易的给每个伸缩项目设置不同的顺序值。更高的值会排在后面，而原来的HTML结构并不会有任何变化。比如我们可以通过以下代码让 .first 排在第一位：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.first &#123;</div><div class="line">  order: -1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>项目的弹性 flex</p>
</li>
</ol>
<ul>
<li>flex-grow 定义伸缩项目的扩展能力。比如我们给伸缩项目设置<code>flex-grow：1;</code>那么每个伸缩项目将设置为一个大小相等的剩余空间，相当于等比的方式分配空间。</li>
<li>flex-shrink：定义伸缩项目收缩的能力。<strong>注意</strong>：负值同样生效。</li>
<li>flex-basis: 设置伸缩基准值，剩余的空间按比率进行伸缩。</li>
</ul>
<p>这三个属性可以用<code>flex</code>简写，默认值为“0 1 auto”。</p>
<h2 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h2><ul>
<li><a href="http://j4n.co/blog/Creating-your-own-css-grid-system" target="_blank" rel="external">Creating Your Own CSS Grid System</a></li>
<li><a href="https://segmentfault.com/a/1190000002910324" target="_blank" rel="external">Flexbox详解</a></li>
<li><a href="http://www.w3cplus.com/css3/flexbox-basics.html" target="_blank" rel="external">Flexbox——快速布局神器</a></li>
<li><a href="http://v3.bootcss.com/css/" target="_blank" rel="external">Bootstrap 全局 CSS 样式</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;文章为百度前端技术学院2016年任务 8-12 的笔记，CSS 部分基本结束。本文大概记述了后半部分任务中的栅格化布局与 Flexfox 布
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://chenyixin.win/tags/JavaScript/"/>
    
      <category term="HTML" scheme="http://chenyixin.win/tags/HTML/"/>
    
      <category term="CSS" scheme="http://chenyixin.win/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>IFE task 1-7 笔记</title>
    <link href="http://chenyixin.win/2016/12/16/title-%20IFE%20task%201-7%20%E7%AC%94%E8%AE%B0/"/>
    <id>http://chenyixin.win/2016/12/16/title- IFE task 1-7 笔记/</id>
    <published>2016-12-16T10:25:16.467Z</published>
    <updated>2017-07-17T12:22:27.183Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>文章为百度前端技术学院2016年任务 1-7 的笔记，大概记述了学习和练习中需要注意的地方以及一点点笔记。大体上包括了以下几个方面：三栏布局、CSS 居中方式、CSS 选择器、<code>tansition</code>和CSS 伪类的应用、利用纯 CSS 实现 tab 的方法等等。 <strong>注意：</strong> 这篇文章写于学习前端不久，可能会出现错误或者概念理解不全面等等纰漏。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="三栏布局"><a href="#三栏布局" class="headerlink" title="三栏布局"></a>三栏布局</h3><p>下面的三个布局都是在 <strong>具体的情况</strong> 下讨论的，具体对应的是任务三。</p>
<h4 id="绝对定位法"><a href="#绝对定位法" class="headerlink" title="绝对定位法"></a>绝对定位法</h4><p>绝对定位法左右两栏采用绝对定位固定，中间用margin值撑开距离。这种方法内部div顺序随意。 需要注意的是：</p>
<ol>
<li>如果中间栏含有最小宽度限制，或是含有宽度的内部元素，当浏览器宽度小到一定程度，会发生层重叠的情况。</li>
<li>如<a href="http://chenyixin.win/practice/practice_03/practice_03_position.html">练习中所示</a>假如三栏外含有包含框，那么这种办法很难发生效果，原因是左右两栏采取绝对定位，脱离了文档流，当左右两栏高度大于中间时，会在视觉上突破包含框。另外，当浏览器宽度小到一定程度，主体可能溢出包含框。如果要求不是很严格，可以在中间添加个大于左右两栏的高度和 overflow。</li>
</ol>
<h4 id="外边距负值法-据说又叫圣杯布局"><a href="#外边距负值法-据说又叫圣杯布局" class="headerlink" title="外边距负值法(据说又叫圣杯布局)"></a>外边距负值法(据说又叫圣杯布局)</h4><p>首先，中间的主体要使用双层div。外层宽度100%并且浮动，内部div为真正的内容。 其次，左右栏浮动，且采用margin负值来定位。以左浮动为例，左栏用margin-left为-100%，右边为margin负值本身元素宽度。 需要注意的是：</p>
<ol>
<li>div顺序必须主体内容在前。</li>
<li>另外，如<a href="http://chenyixin.win/practice/practice_03/practice_03_margin.html">练习中所示</a>假如三栏外含有包含框，那么这种办法也很难发生效果，原因是左右两栏浮动，脱离了文档流，当左右两栏高度大于中间时，会在视觉上突破包含框。另外，当当浏览器宽度小到一定程度，主体可能溢出包含框。如果要求不是很严格，同样在最外层的 container 加上 overflow。</li>
</ol>
<p>这种方法的好处是兼容性很好，几乎可以兼容各种现代浏览器，核心的思想是给自适应的部分设置宽度100%并且浮动，固定部分利用外边距负值来定位，两栏也是同样的道理。</p>
<h4 id="浮动法"><a href="#浮动法" class="headerlink" title="浮动法"></a>浮动法</h4><p>最简单最好理解最好用的方法，左栏左浮动，右栏有浮动，中间自适应。 需要注意的是：</p>
<ol>
<li>主体div放在最后，左右两栏div顺序任意。</li>
<li>最有效果的方式，如<a href="http://chenyixin.win/practice/practice_03/practice_03_float.html">练习中所示</a>即使三栏外面再有包含框，也只需在包含框上添加 overflow 即可。</li>
</ol>
<h3 id="CSS伪类-与-tansition"><a href="#CSS伪类-与-tansition" class="headerlink" title="CSS伪类 与 tansition"></a>CSS伪类 与 tansition</h3><p>CSS 的伪类真是好用，在一些小的练习中基本还不是很明显，稍微复杂一点的练习就突出其用处了。比较常用的有这个几个：</p>
<ol>
<li>:first-child 伪类,来选择作为第一个子元素的元素。</li>
<li>:last-of-type伪类，选择其父元素的特定类型的最后一个子元素的每个元素。</li>
<li>:nth-of-type(n) 选择器匹配属于父元素的特定类型的第 N 个子元素的每个元素，n 可以是数字、关键词或公式。</li>
<li>:hover 锚伪类,些状态包括：活动状态，已被访问状态，未被访问状态，和鼠标悬停状态。注意这个是用顺序的：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a:link &#123;color: #FF0000&#125;		/* 未访问的链接 */</div><div class="line">a:visited &#123;color: #00FF00&#125;	/* 已访问的链接 */</div><div class="line">a:hover &#123;color: #FF00FF&#125;	/* 鼠标移动到链接上 */</div><div class="line">a:active &#123;color: #0000FF&#125;	/* 选定的链接 */</div></pre></td></tr></table></figure>
</li>
</ol>
<p>举个比较实用的小例子做个说明：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">&lt;p&gt; hello world&lt;/p&gt;</div><div class="line">&lt;span&gt;&lt;/span&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>现在我们给它添加CSS 和伪类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">div&#123;</div><div class="line">    text-align:center;</div><div class="line">&#125;</div><div class="line">p&#123;</div><div class="line">	display:inline-block;</div><div class="line">	border-bottom:2px solid black; /* 底边框黑色 */</div><div class="line">&#125;</div><div class="line">p:hover&#123;</div><div class="line">	border-bottom:2px solid red; /* 当鼠标移到此，底边框变成红色 */</div><div class="line">&#125;</div><div class="line">span&#123;</div><div class="line">	color: #fff;</div><div class="line">    display: block;</div><div class="line">    width: 30px;</div><div class="line">    height: 20px;</div><div class="line">    margin: 0 auto;</div><div class="line">    border-top: 2px solid red; /* 视觉为宽30px的红色线段 */</div><div class="line">&#125;</div><div class="line">span:hover&#123;</div><div class="line">    width: 100px; /* 当鼠标移到此，视觉为宽200px的红色线段 */</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们可以通过这两种方式添加类似一种下划线的动画效果，不过这样的变化过于生硬，接下来我们就可以使用<code>transition</code>来做一点点小小的优化。transition 属性是一个简写属性，用于设置四个过渡属性:</p>
<table>
<thead>
<tr>
<th style="text-align:left">值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">transition-property</td>
<td style="text-align:left">规定设置过渡效果的 CSS 属性的名称</td>
</tr>
<tr>
<td style="text-align:left">transition-duration</td>
<td style="text-align:left">规定完成过渡效果需要多少秒或毫秒</td>
</tr>
<tr>
<td style="text-align:left">transition-timing-function</td>
<td style="text-align:left">规定速度效果的速度曲线</td>
</tr>
<tr>
<td style="text-align:left">transition-delay</td>
<td style="text-align:left">定义过渡效果何时开始</td>
</tr>
</tbody>
</table>
<p>其中必须始终设置 transition-duration 属性，否则时长为 0，就不会产生过渡效果。</p>
<p>我们继续完善上面的细节,以 span 为例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">span&#123;</div><div class="line">	color: #fff;</div><div class="line">    display: block;</div><div class="line">    width: 30px;</div><div class="line">    height: 20px;</div><div class="line">    margin: 0 auto;</div><div class="line">    border-top: 2px solid red; /* 视觉为宽30px的红色线段 */</div><div class="line">    transition: width 0.4s ease-in-out; /* ease-in-out 规定以慢速开始和结束的过渡效果 */</div><div class="line">&#125;</div><div class="line">span:hover&#123;</div><div class="line">    width: 100px; /* 当鼠标移到此，视觉为宽200px的红色线段 */</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="利用纯-CSS-实现-tab"><a href="#利用纯-CSS-实现-tab" class="headerlink" title="利用纯 CSS 实现 tab"></a>利用纯 CSS 实现 tab</h3><p>这个是在查看别人代码中发现，于是自己实现了一下，使用纯 CSS 制作 tab 切换效果。核心是利用： display:none 和 :checked 来实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">        &lt;title&gt;&lt;/title&gt;</div><div class="line">        &lt;style media=&quot;screen&quot;&gt;</div><div class="line">            .container&#123;</div><div class="line">				text-align: center;</div><div class="line">                width: 300px;</div><div class="line">                height: 200px;</div><div class="line">                border: 1px solid black;</div><div class="line">                position:relative;</div><div class="line">            &#125;</div><div class="line">            .con&#123;</div><div class="line">            	display:none; /*核心代码，使内容隐藏起来*/</div><div class="line">				position: absolute;</div><div class="line">  				top: 50%;</div><div class="line">  				left: 50%;</div><div class="line">  				transform: translate(-50%, -50%);</div><div class="line">            &#125;</div><div class="line">            .con1&#123;</div><div class="line">            &#125;</div><div class="line">            .container input[type=&quot;radio&quot;]:nth-of-type(1):checked~.con1&#123;</div><div class="line">                display: block;  /*核心代码，点击出现*/</div><div class="line">            &#125;</div><div class="line">            .container input[type=&quot;radio&quot;]:nth-of-type(2):checked~.con2&#123;</div><div class="line">                display: block;  /*核心代码，点击出现*/</div><div class="line">            &#125;</div><div class="line">            .container input[type=&quot;radio&quot;]:nth-of-type(3):checked~.con3&#123;</div><div class="line">                display: block;  /*核心代码，点击出现*/</div><div class="line">            &#125;</div><div class="line">        &lt;/style&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=&quot;container&quot;&gt;</div><div class="line">            &lt;input type=&quot;radio&quot; name=&quot;con&quot; value=&quot;con1&quot; checked&gt;</div><div class="line">            &lt;input type=&quot;radio&quot; name=&quot;con&quot; value=&quot;con2&quot;&gt;</div><div class="line">            &lt;input type=&quot;radio&quot; name=&quot;con&quot; value=&quot;con3&quot;&gt;</div><div class="line"></div><div class="line">            &lt;div class=&quot; con con1&quot;&gt;&lt;p&gt;hello world&lt;/p&gt;&lt;/div&gt;</div><div class="line">            &lt;div class=&quot; con con2&quot;&gt;&lt;p&gt;hello girl&lt;/p&gt;&lt;/div&gt;</div><div class="line">            &lt;div class=&quot; con con3&quot;&gt;&lt;p&gt;hello boby&lt;/p&gt;&lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p><img src="http://ohqryljkl.bkt.clouddn.com/GIF.gif" alt="图片演示"><br>不过用纯 CSS 实现 tab 切换的方式还有几种，暂时还在研究当中，这种相对来说比较简单。</p>
<h3 id="CSS-居中方式"><a href="#CSS-居中方式" class="headerlink" title="CSS 居中方式"></a>CSS 居中方式</h3><p>虽然有这篇万能的文章<a href="http://chenyixin.win/2016/12/12/title-%20CSS%20%E5%B1%85%E4%B8%AD%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97%EF%BC%88%E7%BF%BB%E8%AF%91%EF%BC%89/"> Centering in CSS: A Complete Guide</a>，但是在实际应用过程中还是会有很多麻烦，还是基本的概念理解的不清楚。实际应用中来说水平居中用到的多一点，无论是对于行内元素还是块元素来说。垂直居中的话不是很常用，因为如果要求不是很严格的话，都会用到绝地定位来定位，比较常用的是利用行高和高度相等来垂直居中，尤其是在导航栏设置中。设置一个如 td 和 tr 那样的元素中，然后使用 vertical-align 来实现垂直居中偶尔会用到。因为 flex 布局暂时还没有细学。</p>
<p>下面通过几个导航栏的设置来巩固一下，为什么是导航栏呢？因为这个看似简单却可以用到很多知识，定位，浮动，居中等这篇文章提到的所有概念。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;style&gt;</div><div class="line">header&#123;</div><div class="line">	position:relative;</div><div class="line">    &#125;</div><div class="line">ul &#123;</div><div class="line">    list-style-type: none;</div><div class="line">    margin: 0;</div><div class="line">    padding: 0;</div><div class="line">    overflow: hidden;/*必须*/</div><div class="line">    border: 1px solid #e7e7e7;</div><div class="line">    background-color: #f3f3f3;</div><div class="line">&#125;</div><div class="line"></div><div class="line">li &#123;</div><div class="line">    float: left; /*浮动到左侧*/</div><div class="line">&#125;</div><div class="line"></div><div class="line">li a &#123;</div><div class="line">    display: block; /* 整个区域都可以被鼠标触发*/</div><div class="line">    color: #666;</div><div class="line">    text-align: center; /* 让a元素水平居中*/</div><div class="line">    padding: 14px 16px; /*垂直居中定位*/</div><div class="line">    text-decoration: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line">li a:hover:not(.active) &#123;</div><div class="line">    background-color: #ddd; /* 利用hover为鼠标悬浮提供样式*/</div><div class="line">&#125;</div><div class="line"></div><div class="line">li a.active &#123;</div><div class="line">    color: white;</div><div class="line">    background-color: #4CAF50;</div><div class="line">&#125;</div><div class="line">div&#123;</div><div class="line">position:absolute;</div><div class="line">top:0;</div><div class="line">right:10px;</div><div class="line">padding: 14px 16px; /*垂直居中*/</div><div class="line">font-size:15px;</div><div class="line">&#125;</div><div class="line">span&#123;</div><div class="line">cursor:pointer;</div><div class="line">&#125;</div><div class="line">span:hover&#123;</div><div class="line">color:red; /* 利用hover为鼠标悬浮提供样式*/</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;header&gt;</div><div class="line">&lt;ul&gt;</div><div class="line">  &lt;li&gt;&lt;a class=&quot;active&quot; href=&quot;#home&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;</div><div class="line">  &lt;li&gt;&lt;a href=&quot;#news&quot;&gt;News&lt;/a&gt;&lt;/li&gt;</div><div class="line">  &lt;li&gt;&lt;a href=&quot;#contact&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt;</div><div class="line">  &lt;li&gt;&lt;a href=&quot;#about&quot;&gt;About&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">&lt;div&gt;&lt;span&gt;登陆&lt;/span&gt;&lt;/div&gt;</div><div class="line">&lt;/header&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>这个例子大多参考 w3c 文档的教程，只是其中一种方法，具体在实际练习过程中的方式多种多样。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>写 CSS 简单，但写好了不简单。元素属性的设置和相互影响一不留心就可能需要调试，假如对基本概念熟悉的话不但写起来思路清晰容易上手，就算出错了也可以很快定位到问题所在，路漫漫要写出好的代码还得继续修炼。另外，属性的书写顺序也要值得注意并且养成习惯：</p>
<blockquote>
<p>应按功能进行分组，并以 Formatting Model（布局方式、位置） &gt; Box Model（尺寸） &gt; Typographic（文本相关） &gt; Visual（视觉效果） 的顺序书写，以提高代码的可读性。<br>解释：<br>Formatting Model 相关属性包括：position / top / right / bottom / left / float / display / overflow 等<br>Box Model 相关属性包括：border / margin / padding / width / height 等<br>Typographic 相关属性包括：font / line-height / text-align / word-wrap 等<br>Visual 相关属性包括：background / color / transition / list-style 等</p>
</blockquote>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://www.w3school.com.cn/h.asp" target="_blank" rel="external">W3C中文文档</a><br><a href="http://www.w3schools.com/css/css_navbar.asp" target="_blank" rel="external">CSS Navigation Bar</a><br><a href="http://www.zhangxinxu.com/wordpress/2009/11/%E6%88%91%E7%86%9F%E7%9F%A5%E7%9A%84%E4%B8%89%E7%A7%8D%E4%B8%89%E6%A0%8F%E7%BD%91%E9%A1%B5%E5%AE%BD%E5%BA%A6%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80%E6%96%B9%E6%B3%95/" target="_blank" rel="external">三栏网页宽度自适应布局方法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;文章为百度前端技术学院2016年任务 1-7 的笔记，大概记述了学习和练习中需要注意的地方以及一点点笔记。大体上包括了以下几个方面：三栏布局
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://chenyixin.win/tags/JavaScript/"/>
    
      <category term="HTML" scheme="http://chenyixin.win/tags/HTML/"/>
    
      <category term="CSS" scheme="http://chenyixin.win/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 实现居中完全指南 （ 翻译 ）</title>
    <link href="http://chenyixin.win/2016/12/12/title-%20CSS%20%E5%B1%85%E4%B8%AD%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97%EF%BC%88%E7%BF%BB%E8%AF%91%EF%BC%89/"/>
    <id>http://chenyixin.win/2016/12/12/title- CSS 居中完全指南（翻译）/</id>
    <published>2016-12-12T13:27:48.623Z</published>
    <updated>2017-07-17T12:21:54.592Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>文章完整了讨论了 CSS 居中的各种情况。因为文章不是很难就做了一下翻译，由于自己英文水平并不在行，有可能出现错误，所以可以点击 <a href="https://css-tricks.com/centering-css-complete-guide/" target="_blank" rel="external">这条链接</a> 前往原文 Centering in CSS: A Complete Guide 。本文仅仅做了一些概念性的添加。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="引"><a href="#引" class="headerlink" title="引"></a>引</h3><p>CSS 实现居中是个特别的让人头疼的问题，以至于让我们常问：为什么实现居中是如此困难？然而，事实上并非如此困难。只是在不同的情况下，我们需要依据不同的情境去解决问题，这让我们难以抉择。所以让我们来做一个决策树，让来选择变的更简单。</p>
<p>那么问题来了：I need to center…</p>
<h3 id="水平方向"><a href="#水平方向" class="headerlink" title="水平方向"></a>水平方向</h3><h4 id="是否是行内元素或者类行类元素（例如文本和链接-）？"><a href="#是否是行内元素或者类行类元素（例如文本和链接-）？" class="headerlink" title="是否是行内元素或者类行类元素（例如文本和链接 ）？"></a>是否是行内元素或者类行类元素（例如文本和链接 ）？</h4><p>在块级父容器中，我们仅仅使用 <code>text-align:center;</code>就可以让行内元素居中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.center-children &#123;</div><div class="line">  text-align: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这种方法可以让 inline, inline-block, inline-table, inline-flex等元素实现水平居中。</p>
<blockquote>
<p>text-align 属性规定元素中的文本的水平对齐方式。该属性通过指定行框与哪个点对齐，从而设置块级元素内文本的水平对齐方式。</p>
</blockquote>
<h4 id="是否是块级元素？"><a href="#是否是块级元素？" class="headerlink" title="是否是块级元素？"></a>是否是块级元素？</h4><p>要让块级元素居中，你可以给它设置 <code>margin-left</code> 和 <code>margin-right</code> 为 <code>auto</code> ，不过这样做的前提是已经为元素设置了宽度，否则它将拉伸成为父容器的宽度而不需要居中了。常用的方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.center-me &#123;</div><div class="line">  margin: 0 auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>无论块级元素和父容器的宽度如何变化都不会影响到元素的居中效果。</p>
<h4 id="是否要让多个块元素水平居中？"><a href="#是否要让多个块元素水平居中？" class="headerlink" title="是否要让多个块元素水平居中？"></a>是否要让多个块元素水平居中？</h4><p>假如你要让多个块元素在同一水平线上居中，给它们设置 <code>display</code> 类型可能是个更好的选择，这里有两个例子，分别是利用 <code>inline-block</code> 和 <code>flexbox</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/* inline-block */</div><div class="line">.inline-block-center &#123;</div><div class="line">  text-align: center;</div><div class="line">&#125;</div><div class="line">.inline-block-center div &#123;</div><div class="line">  display: inline-block;</div><div class="line"></div><div class="line">/* flexbox */</div><div class="line">.flex-center &#123;</div><div class="line">  display: flex;</div><div class="line">  justify-content: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="垂直方向"><a href="#垂直方向" class="headerlink" title="垂直方向"></a>垂直方向</h3><p>垂直居中需要一点点技巧</p>
<h4 id="是否是行内元素或者类行类元素（例如文本和链接-）？-1"><a href="#是否是行内元素或者类行类元素（例如文本和链接-）？-1" class="headerlink" title="是否是行内元素或者类行类元素（例如文本和链接 ）？"></a>是否是行内元素或者类行类元素（例如文本和链接 ）？</h4><ol>
<li><p>在单行的情况下<br> 一些情况下行内元素看起来垂直居中，仅仅是使它们的上内边距和下内边距相等：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.link &#123;</div><div class="line">  padding-top: 30px;</div><div class="line">  padding-bottom: 30px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 如果由于某种情况而不能使用内边距，且我们知道文本不会换行的情况下，可以通过让行高等于高的这种方式实现垂直居中：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.center-text-trick &#123;</div><div class="line">  height: 100px;</div><div class="line">  line-height: 100px;</div><div class="line">  white-space: nowrap;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在多行的情况下<br>我们同样可以采用让上内边距和下内边距相等来实现多行文本的垂直居中，当这种办法失效的时候，我们可以给多行文本设置一个如 <code>td</code> 和 <code>tr</code> 那样的元素中，然后使用 <code>vertical-align</code> 来实现垂直居中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">.center-table &#123;</div><div class="line">  display: table;</div><div class="line">  height: 250px;</div><div class="line">  background: white;</div><div class="line">  width: 240px;</div><div class="line">  margin: 20px;</div><div class="line">&#125;</div><div class="line">.center-table p &#123;</div><div class="line">  display: table-cell;</div><div class="line">  margin: 0;</div><div class="line">  background: black;</div><div class="line">  color: white;</div><div class="line">  padding: 20px;</div><div class="line">  border: 10px solid white;</div><div class="line">  vertical-align: middle;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>此外，当你觉得这种方式不好你可以尝试使用 flex 布局<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.flex-center-vertically &#123;</div><div class="line">  display: flex;</div><div class="line">  justify-content: center;</div><div class="line">  flex-direction: column;</div><div class="line">  height: 400px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>注意：在上面的方案中 只有父元素有高度（ 例如 px，% 等等）的时候，垂直居中才会生效。</strong><br>如果上述方法都不起作用，那么你就需要使用被称为幽灵元素（ghost element）的非常规解决方式：在垂直居中的元素上添加伪元素，设置伪元素的高等于父级容器的高，然后为文本添加 vertical-align: center; 样式，即可实现垂直居中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">.ghost-center &#123;</div><div class="line">  position: relative;</div><div class="line">&#125;</div><div class="line">.ghost-center::before &#123;</div><div class="line">  content: &quot; &quot;;</div><div class="line">  display: inline-block;</div><div class="line">  height: 100%;</div><div class="line">  width: 1%;</div><div class="line">  vertical-align: middle;</div><div class="line">&#125;</div><div class="line">.ghost-center p &#123;</div><div class="line">  display: inline-block;</div><div class="line">  vertical-align: middle;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="是否是块级元素？-1"><a href="#是否是块级元素？-1" class="headerlink" title="是否是块级元素？"></a>是否是块级元素？</h4><ol>
<li><p>是否知道块级元素的高？<br>在网页布局中，很多情况下我们常常不知道元素的高度，例如当宽度改变时，文本的重新编排会改变高度。不同数量或样式的文本的设置都会改变高度，有时候图片也可能随之变化等等。但是，假如我们知道元素的高度，可以这样使之垂直居中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.parent &#123;</div><div class="line">  position: relative;</div><div class="line">&#125;</div><div class="line">.child &#123;</div><div class="line">  position: absolute;</div><div class="line">  top: 50%;</div><div class="line">  height: 100px;</div><div class="line">  margin-top: -50px; /* account for padding and border if not using box-sizing: border-box; */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>不知道元素的高？<br>如果我们不知道元素的高度，通过把元素定位到中心然后利用 transform 让元素负方向移动一半：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.parent &#123;</div><div class="line">  position: relative;</div><div class="line">&#125;</div><div class="line">.child &#123;</div><div class="line">  position: absolute;</div><div class="line">  top: 50%;</div><div class="line">  transform: translateY(-50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用 flexbox</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.parent &#123;</div><div class="line">  display: flex;</div><div class="line">  flex-direction: column;</div><div class="line">  justify-content: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="水平垂直同时居中"><a href="#水平垂直同时居中" class="headerlink" title="水平垂直同时居中"></a>水平垂直同时居中</h3><h4 id="在宽高固定情况下"><a href="#在宽高固定情况下" class="headerlink" title="在宽高固定情况下"></a>在宽高固定情况下</h4><p>设定父级容器为相对定位的容器，设定子元素绝对定位的位置 position: absolute; top: 50%; left: 50%，最后使用负外边距值等于宽高的一半来实现垂直居中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">.parent &#123;</div><div class="line">  position: relative;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.child &#123;</div><div class="line">  width: 300px;</div><div class="line">  height: 100px;</div><div class="line">  padding: 20px;</div><div class="line"></div><div class="line">  position: absolute;</div><div class="line">  top: 50%;</div><div class="line">  left: 50%;</div><div class="line"></div><div class="line">  margin: -70px 0 0 -170px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="在不知道宽高的情况下"><a href="#在不知道宽高的情况下" class="headerlink" title="在不知道宽高的情况下"></a>在不知道宽高的情况下</h4><p>可以采用类似上面块级元素垂直居中的方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.parent &#123;</div><div class="line">  position: relative;</div><div class="line">&#125;</div><div class="line">.child &#123;</div><div class="line">  position: absolute;</div><div class="line">  top: 50%;</div><div class="line">  left: 50%;</div><div class="line">  transform: translate(-50%, -50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="flexbox"><a href="#flexbox" class="headerlink" title="flexbox"></a>flexbox</h4><p>要实现水平垂直同时剧中，需使用两条居中属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.parent &#123;</div><div class="line">  display: flex;</div><div class="line">  justify-content: center;</div><div class="line">  align-items: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>在宽高已知的情况下，要实现水平垂直方向上的居中也可以采用这样的方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">.parent &#123;</div><div class="line">  position: relative;</div><div class="line">&#125;</div><div class="line">.child &#123;</div><div class="line">     margin: auto;</div><div class="line">     position: absolute;</div><div class="line">     top: 0;</div><div class="line">     left: 0;</div><div class="line">     bottom: 0;</div><div class="line">     right: 0;</div><div class="line">     width: 400px;</div><div class="line">     height: 200px;</div><div class="line">     background-color: #ccc;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>你完全可以利用 CSS 让任何元素居中。</p>
<h3 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h3><p>原文作者：CHRIS COYIER<br>原文链接：<a href="https://css-tricks.com/centering-css-complete-guide/" target="_blank" rel="external">Centering in CSS: A Complete Guide</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;文章完整了讨论了 CSS 居中的各种情况。因为文章不是很难就做了一下翻译，由于自己英文水平并不在行，有可能出现错误，所以可以点击 &lt;a hr
    
    </summary>
    
    
      <category term="Centering in CSS" scheme="http://chenyixin.win/tags/Centering-in-CSS/"/>
    
  </entry>
  
  <entry>
    <title>表单对齐的两种方式</title>
    <link href="http://chenyixin.win/2016/12/11/title-%20%E8%A1%A8%E5%8D%95%E5%AF%B9%E9%BD%90%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://chenyixin.win/2016/12/11/title- 表单对齐的两种方式/</id>
    <published>2016-12-11T13:08:53.346Z</published>
    <updated>2017-07-17T12:17:06.301Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>文章探讨了两种简单的表单对齐方式，一种是在有固定宽度的情况下，另一种是 width 为 100% 的情况下，核心都是通过给 label 元素设定宽度，再利用 text-align 来达到对齐效果，需要注意的是 input 输入框下的说明文字与 input 框的对齐。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="固定宽度的表单"><a href="#固定宽度的表单" class="headerlink" title="固定宽度的表单"></a>固定宽度的表单</h3><p>首先我们利用表单元素来写一个简易的表单，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;form action=&quot;&quot; method=&quot;&quot;&gt;</div><div class="line">    &lt;div&gt;</div><div class="line">        &lt;label for=&quot;name&quot;&gt;Name:&lt;/label&gt;</div><div class="line">        &lt;input type=&quot;text&quot; id=&quot;name&quot; /&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div&gt;</div><div class="line">        &lt;label for=&quot;mail&quot;&gt;E-mail:&lt;/label&gt;</div><div class="line">        &lt;input type=&quot;email&quot; id=&quot;mail&quot; /&gt;</div><div class="line">        &lt;p class=&quot;tips&quot;&gt;填上你的邮箱地址&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div&gt;</div><div class="line">        &lt;label for=&quot;msg&quot;&gt;Message:&lt;/label&gt;</div><div class="line">        &lt;textarea id=&quot;msg&quot;&gt;&lt;/textarea&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line"></div><div class="line">    &lt;div class=&quot;button&quot;&gt;</div><div class="line">        &lt;button type=&quot;submit&quot;&gt;Send your message&lt;/button&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure></p>
<p>然后在给其添加 CSS ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">form &#123;</div><div class="line">    margin: 0 auto;</div><div class="line">    width: 400px;</div><div class="line">    padding: 1em;</div><div class="line">    border: 1px solid #ccc;</div><div class="line">    border-radius: 1em;</div><div class="line">&#125;</div><div class="line"></div><div class="line">form div+div &#123;</div><div class="line">    margin-top: 1em;</div><div class="line">&#125;</div><div class="line"></div><div class="line">label &#123;</div><div class="line">    /* 重要代码 */</div><div class="line">    display: inline-block;</div><div class="line">    width: 90px;</div><div class="line">    text-align: right;</div><div class="line">&#125;</div><div class="line"></div><div class="line">form p &#123;</div><div class="line">    /* 这个额外的外边距大致充当了label和说明文字的间距 */</div><div class="line">    margin-left: .5em;</div><div class="line">&#125;</div><div class="line"></div><div class="line">form .tips &#123;</div><div class="line">    font-size: 12px;</div><div class="line">    color: #888;</div><div class="line">    /* 将说明文字置于和文本框相同的位置 */</div><div class="line">    padding-left: 90px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">input,</div><div class="line">textarea &#123;</div><div class="line">    font: 1em sans-serif;</div><div class="line">    width: 300px;</div><div class="line">    -moz-box-sizing: border-box;</div><div class="line">    box-sizing: border-box;</div><div class="line">    border: 1px solid #999;</div><div class="line">&#125;</div><div class="line"></div><div class="line">input:focus,</div><div class="line">textarea:focus &#123;</div><div class="line">    border-color: #000;</div><div class="line">&#125;</div><div class="line"></div><div class="line">textarea &#123;</div><div class="line">    vertical-align: top;</div><div class="line">    height: 5em;</div><div class="line">    resize: vertical;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.button &#123;</div><div class="line">    /* 将按钮置于和文本框相同的位置 */</div><div class="line">    padding-left: 90px;</div><div class="line">    /* 和label元素一样大小 */</div><div class="line">&#125;</div><div class="line"></div><div class="line">button &#123;</div><div class="line">    /* 这个额外的外边距大致充当了label和对应文本框间的间距 */</div><div class="line">    margin-left: .5em;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>效果如图所示：</p>
<p><img src="http://ohqryljkl.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20161211203847.png" alt=""></p>
<h3 id="width-为-100-的表单"><a href="#width-为-100-的表单" class="headerlink" title="width 为 100% 的表单"></a>width 为 100% 的表单</h3><p>首先我们利用表单元素来写一个简易的表单，代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"tips"</span> <span class="attr">for</span>=<span class="string">"email"</span>&gt;</span>请输入这个邮箱地址：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"emailss"</span> <span class="attr">id</span>=<span class="string">"email"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span>邮箱地址请按要求格式输入<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"tips"</span> <span class="attr">for</span>=<span class="string">"pw1"</span>&gt;</span>请输入密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd1"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"tips"</span> <span class="attr">for</span>=<span class="string">"pw1"</span>&gt;</span>请重复输入密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd1"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span>密码请为6-16位英文数字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"tips"</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">checked</span>=<span class="string">"checked"</span> <span class="attr">name</span>=<span class="string">"Sex"</span> <span class="attr">value</span>=<span class="string">"male"</span> /&gt;</span>男</div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"Sex"</span> <span class="attr">value</span>=<span class="string">"female"</span> /&gt;</span>女</div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"tips"</span>&gt;</span>城市：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"北京"</span> <span class="attr">selected</span>=<span class="string">"selected"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"上海"</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"西安"</span>&gt;</span>西安<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"tips"</span>&gt;</span>爱好：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"checkbox1"</span> <span class="attr">value</span>=<span class="string">"checkbox"</span>&gt;</span>运动</div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"checkbox2"</span> <span class="attr">value</span>=<span class="string">"checkbox"</span>&gt;</span>艺术</div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"checkbox3"</span> <span class="attr">value</span>=<span class="string">"checkbox"</span>&gt;</span>科学</div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"tips"</span>&gt;</span>个人描述：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"des"</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"2"</span>&gt;</span>这是一个多行输入框，输入你的个人描述<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"submitButton"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>然后在给其添加 CSS ：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">aside</span> <span class="selector-tag">form</span> <span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">15px</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">aside</span> <span class="selector-tag">form</span> <span class="selector-tag">div</span> <span class="selector-class">.tips</span> &#123;</div><div class="line">    <span class="comment">/* 设置label的宽度，让label浮动，右对齐，设置的padding-right的大小和下面提示文字的padding-left相等 */</span></div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">text-align</span>: right;</div><div class="line">    <span class="attribute">width</span>: <span class="number">35%</span>;</div><div class="line">    <span class="attribute">padding-right</span>: <span class="number">15px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">aside</span> <span class="selector-tag">form</span> <span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123;</div><div class="line">    <span class="comment">/* margin-left与label标签的宽度一样，设置的padding-left的大小和上面label的padding-right相等 */</span></div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">35%</span>;</div><div class="line">    <span class="attribute">padding-left</span>: <span class="number">15px</span>;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#aaa</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">aside</span> <span class="selector-tag">textarea</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">aside</span> <span class="selector-class">.submitButton</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</div><div class="line">    <span class="attribute">border</span>: none;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</div><div class="line">    <span class="attribute">color</span>: white;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#128fdc</span>;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">aside</span> <span class="selector-class">.submitButton</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#0063dc</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>效果如图所示：</p>
<p><img src="http://ohqryljkl.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20161211203905.png" alt=""></p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol>
<li>HTML 表单支持不少伪类，用以表现各元素的状态。比如，我们可以在组件被激活时作突出显示，这样可以方便用户知道表单填到哪一。</li>
<li>HTML5 拥有多个新的表单输入类型。这些新特性提供了更好的输入控制和验证。比如 placeholder 属性。placeholder 属性提供一种提示（hint），描述输入域所期待的值。</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>首先是要让 label 对齐。方法一种使用 display 让 label 变成行内块级元素，设置宽度后，利用 text-align 右对齐；方法二使用 float 让 label 浮动 再设置宽度，然后右对齐。</li>
<li>其次需要注意的 input 下的说明文字需要和输入框对齐。都是利用 label 的宽度 和 padding 、margin值来得出说明文字 P 的 margin-left 和 padiing-left。</li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="http://www.w3school.com.cn/html/html_forms.asp" target="_blank" rel="external">HTML 表单</a></li>
<li><a href="https://segmentfault.com/a/1190000005367699" target="_blank" rel="external">HTML表单指南—第一个HTML表单</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;文章探讨了两种简单的表单对齐方式，一种是在有固定宽度的情况下，另一种是 width 为 100% 的情况下，核心都是通过给 label 元素
    
    </summary>
    
    
      <category term="HTML" scheme="http://chenyixin.win/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>关于 Atom 的插件和主题无法安装的问题</title>
    <link href="http://chenyixin.win/2016/12/08/title-%20%E5%85%B3%E4%BA%8E%20Atom%20%E7%9A%84%E6%8F%92%E4%BB%B6%E5%92%8C%E4%B8%BB%E9%A2%98%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://chenyixin.win/2016/12/08/title- 关于 Atom 的插件和主题无法安装的问题/</id>
    <published>2016-12-08T13:59:43.365Z</published>
    <updated>2017-07-17T12:18:11.207Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>关于Atom 的插件和主题安装无法在设置中下载和安装的解决办法。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>今天折腾了一下 Atom ，这个 Github 官方出品的编辑器的发展势头相当迅猛。不过在安装使用过程中却遇到了很多问题。Atom的安装比较简单，默认一键安装在 C 盘。官方有修改安装路径的教程，不过我并没有使用。在Atom的主题和插件安装上遇到了麻烦，就是在 Setting 中无法安装这个问题。</p>
<p>Atom 中文社区给出了以下<a href="http://atom-china.org/t/atom/797/2" target="_blank" rel="external">解决方案</a>：</p>
<ul>
<li>给 apm 绑代理，可以直接使用 socks 代理</li>
<li>使用 proxychains-ng445 绑 socks 代理，然后 用 apm 命令安装 atom 插件</li>
<li>或者试试国内 npm 源</li>
<li>使用 VPN</li>
</ul>
<p>不管可能是由于我个人原因或网路问题。即无法通过  apm 下载插件，也没办法在设置中下载，即使是在挂了 VPN 或使用了sock代理的情况下也无法安装和下载。只能退而求其次手动下载，多次的安装是相当的麻烦。</p>
<p>下面给出手动下载的解决办法：</p>
<ol>
<li>找到 Atom 的 package 文件夹，这个是放置 Atom 插件和主题的地方，可以直接在 C 盘中寻找，一般在<code>C:\Users\XXXX\.atom\packages</code>这个路径之下，或者在 Atom 的 setting 页面中点击 open config folder 进入到 Atom 的配置项目，然后我们转到该项目下的 Windows 窗口进入 package 文件夹。</li>
<li>在 Atom 的官方<a href="https://atom.io/packages" target="_blank" rel="external">插件主题网站</a>中浏览或者查找自己所需要的插件和主题。</li>
<li>找到插件的 Github 地址，并复制备用。</li>
<li><p>在 packages 文件夹中运行 Git Bash，并依次输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/emmetio/emmet-atom （以emmet-atom为例，将插件的源代码克隆到文件夹中）</div><div class="line">cd emmet-atom （进入插件包文件夹）</div><div class="line">npm install （生成插件）</div></pre></td></tr></table></figure>
</li>
<li><p>重启 Atom，安装完成。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;关于Atom 的插件和主题安装无法在设置中下载和安装的解决办法。&lt;/p&gt;
&lt;h2 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;
    
    </summary>
    
    
      <category term="Atom" scheme="http://chenyixin.win/tags/Atom/"/>
    
  </entry>
  
  <entry>
    <title>使用 Github Pages 和 Hexo 搭建个人独立博客（Win 10环境下）</title>
    <link href="http://chenyixin.win/2016/12/06/title-%20%E4%BD%BF%E7%94%A8%20Github%20Pages%20%E5%92%8C%20Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%EF%BC%88Win%2010%E7%8E%AF%E5%A2%83%E4%B8%8B%EF%BC%89/"/>
    <id>http://chenyixin.win/2016/12/06/title- 使用 Github Pages 和 Hexo 搭建个人独立博客（Win 10环境下）/</id>
    <published>2016-12-06T07:00:13.531Z</published>
    <updated>2017-07-17T12:19:43.510Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>这是一篇使用 Github Pages 和 Hexo 来搭建个人博客的笔记，记录了搭建博客的过程与其中遇到的问题。其中主要包括了以下几个部分：如何配置和使用 Hexo 框架，如何将配置好的 Hexo 部署到 Github项目中，如何绑定域名，以及 Hexo 简单优化和常用命令。</p>
<hr>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="一、Hexo-的配置和使用"><a href="#一、Hexo-的配置和使用" class="headerlink" title="一、Hexo 的配置和使用"></a>一、Hexo 的配置和使用</h3><h4 id="1、Hexo-是什么？"><a href="#1、Hexo-是什么？" class="headerlink" title="1、Hexo 是什么？"></a>1、Hexo 是什么？</h4><p>Hexo 是一款简洁、快速且高效的博客框架，可以在很短的时间内利用主题生成静态网页。</p>
<h4 id="2、Hexo-安装前提"><a href="#2、Hexo-安装前提" class="headerlink" title="2、Hexo 安装前提"></a>2、Hexo 安装前提</h4><p>Hexo 的安装非常简单，在 Hexo 安装必须首先安装以下应用程序：</p>
<ul>
<li>Node.js<br>  可以简单理解为一种 Javascript 的运行环境或者平台，可以用来做服务器，执行某些任务。</li>
<li>Git<br>  Git 是一种分布式版本控制工具，可以用来将远程代码仓库复制到本地，或者将本地仓库推送到远程仓库。</li>
</ul>
<p>在相对应的网站主页下载应用程序，然后安装即可。Windows 系统安装相对应的版本。</p>
<p>Node.js <a href="https://nodejs.org/zh-cn/" target="_blank" rel="external">点我前往下载页面</a></p>
<p><img src="http://ohqryljkl.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20161206102456.png" alt="Node.js"></p>
<p>Git <a href="https://git-scm.com/" target="_blank" rel="external">点我前往下载页面</a></p>
<p><img src="http://ohqryljkl.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20161206102517.png" alt="Git"></p>
<p>下载完成后鼠标点击右键选择 Git Bash Here 就可以打开 Git 打开后如下图所示：</p>
<p><img src="http://ohqryljkl.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20161206104023.png" alt=""></p>
<h4 id="3、Hexo-的安装和配置"><a href="#3、Hexo-的安装和配置" class="headerlink" title="3、Hexo 的安装和配置"></a>3、Hexo 的安装和配置</h4><p>桌面点击鼠标右键，选择 Git Bash Here，输入 npm 命令即可安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure></p>
<p>注意，如果没有 VPN 的话可能下载的速度会很慢很慢，如果出现这种状况，可以选择淘宝的 npm 源：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure></p>
<p>安装完成后，在任意自己喜欢的位置创建 Hexo 文件夹，比如我的是（G:\Blog\Hexo），然后鼠标右键，选择 Git Bash Here，进入 Git 的命令框，执行以下操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo init</div><div class="line">$ npm install</div></pre></td></tr></table></figure></p>
<p>耐心等待后，可以看到该文件夹中已经安装了 Hexo 所需要的文件</p>
<p><img src="http://ohqryljkl.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20161206110543.png" alt="文件目录"></p>
<p>继续执行下面的命令，即可在浏览器中登陆 localhost:4000 在本地查看效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div><div class="line">$ hexo server</div></pre></td></tr></table></figure></p>
<p><img src="http://ohqryljkl.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20161206111045.png" alt="图片"></p>
<p>至此， Hexo 的安装已经全部结束，但仅仅在本地查看博客显然不是我们的目的，为了让别人也可以看到我们的博客，相互交流，我们需要把它发布到服务器上。而 Github Pages 可以给我们提供这个免费的服务器，省去了自己搭建服务器和数据库的麻烦。</p>
<hr>
<h3 id="二、将博客部署到-Github-Pages-上"><a href="#二、将博客部署到-Github-Pages-上" class="headerlink" title="二、将博客部署到 Github Pages 上"></a>二、将博客部署到 Github Pages 上</h3><h4 id="1、Github-Pages是什么？"><a href="#1、Github-Pages是什么？" class="headerlink" title="1、Github  Pages是什么？"></a>1、Github  Pages是什么？</h4><p>Github Pages可以被认为是用户编写的、托管在github上的静态网页。可以绑定你的域名，Github Pages可以为你提供一个免费的服务器，你可以使用它来做博客。</p>
<h4 id="2、创建"><a href="#2、创建" class="headerlink" title="2、创建"></a>2、创建</h4><p>假如你没有 Github 账号你需要登陆主页点击 Sign Up 注册自己的账号，随后在 Github中创建一个仓库，<br>需要<strong>注意</strong>的是仓库是有规则的，其格式必须为：yourusername.github.io。比如我的用户名为：<code>onepiece</code>，那么这个仓库名（Repository name）必须为：<code>onepiece.github.io</code>。</p>
<p><img src="http://ohqryljkl.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20161206115947.png" alt="创建仓库"></p>
<p>然后需要配置 Github 的 SSH 密钥来让本地的项目与远程的 Github建立联系，我们在本地写好代码后，可以直接通过 Git操作实现本地代码库与 Github 代码库同步。因为我个人以前下载了 Github 客户端，使用客户端进行上传或者克隆到本地，所以本机已经有密钥存在，并不需要按照下面的教程配置SSH。所以配置SSH请参考：这篇文章中的<a href="https://my.oschina.net/ryaneLee/blog/638440" target="_blank" rel="external">配置SSH</a>部分，以及这篇<a href="http://www.cnblogs.com/ayseeing/p/3572582.html" target="_blank" rel="external">Github添加密钥</a>。</p>
<h4 id="3、将-Hexo-部署到-Github"><a href="#3、将-Hexo-部署到-Github" class="headerlink" title="3、将 Hexo 部署到 Github"></a>3、将 Hexo 部署到 Github</h4><ol>
<li><p>登陆 Github 打开自己的项目 username.github.io</p>
<p><img src="http://ohqryljkl.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20161206125247.png" alt="打开项目"></p>
</li>
<li><p>点击<code>clone or download</code>复制地址</p>
</li>
</ol>
<p><img src="http://ohqryljkl.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20161206125247.png" alt="复制地址"></p>
<ol>
<li>打开你一开始创建的Hexo文件夹（如G:\Blog\Hexo），用记事本打开刚文件夹下的_config.yml（这个是Hexo 的配置文件，以后要经常用到）文件</li>
</ol>
<p><img src="http://ohqryljkl.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20161206125712.png" alt="配置文件"></p>
<ol>
<li>找到如图所示的关键词<code>deploy</code>，然后做出相对应的修改</li>
</ol>
<p><img src="http://ohqryljkl.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20161206125738.png" alt="修改"></p>
<ol>
<li>在 Hexo 文件夹下执行命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g -d</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="http://ohqryljkl.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20161206130340.png" alt="部署成功"></p>
<p>稍等片刻后（大概不到一分钟中），就已经成功将本地的博客部署到 Github Pages 中，现在在浏览器中输入对应的地址：<code>username.github.io</code>就可以看到我们的博客了。</p>
<h3 id="三、优化我们的博客"><a href="#三、优化我们的博客" class="headerlink" title="三、优化我们的博客"></a>三、优化我们的博客</h3><h4 id="1、主题优化"><a href="#1、主题优化" class="headerlink" title="1、主题优化"></a>1、主题优化</h4><p><a href="https://hexo.io/themes/" target="_blank" rel="external">Hexo主题官网</a> 提供了很多主题供我们使用，你依照个人的喜欢预览挑选主题。我个人使用的是比较常用的一款NexT.Mist，知乎上这个问题<a href="https://www.zhihu.com/question/24422335" target="_blank" rel="external">有哪些好看的 Hexo 主题？</a>下有答主按照star数做了个排行，你可以在其中挑选一款主题供自己使用。</p>
<ol>
<li><p>首先你要进入这个主题的 Github 地址，将这个地址复制下来，比如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/iissnan/hexo-theme-next</div></pre></td></tr></table></figure>
</li>
<li><p>然后打开 Hexo 文件夹下的 themes目录 （G:\Blog\hexo\themes），右键 Git Bash，输入命令并执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/iissnan/hexo-theme-next(此处地址替换成你需要使用的主题的地址)</div></pre></td></tr></table></figure>
</li>
<li><p>等待下载完成。</p>
</li>
<li>修改配置文件，<strong>注意</strong>是 Hexo 目录下的_config.yml配置文件修改参数<code>theme: hexo-theme-next</code></li>
<li><p>在 Hexo 目录中右键 Git Bash输入命令并执行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo clean   (必须要，不然有时因为缓存问题，服务器更新不了主题)</div><div class="line">hexo g -d</div></pre></td></tr></table></figure>
</li>
<li><p>等待片刻，然后浏览主页便可以查看相对应的效果。</p>
</li>
</ol>
<p>更多有个性的设定，例如</p>
<ul>
<li>设置「RSS」</li>
<li>添加「标签」页面</li>
<li>添加「分类」页面</li>
<li>设置「字体」</li>
<li>设置「代码高亮主题」</li>
<li>侧边栏社交链接</li>
<li>开启打赏功能</li>
<li>设置友情链接</li>
<li>多说评论显示 UA</li>
<li>腾讯公益404页面</li>
<li>站点建立时间</li>
<li>订阅微信公众号</li>
</ul>
<p>等功能，在相应了主题主页有详细的配置说明，你可以点击进入参考设置<a href="http://theme-next.iissnan.com/theme-settings.html#duoshuo-ua" target="_blank" rel="external">NexT的主题配置</a>。</p>
<h4 id="2、SEO优化"><a href="#2、SEO优化" class="headerlink" title="2、SEO优化"></a>2、SEO优化</h4><p>请参考<a href="http://www.jianshu.com/p/86557c34b671" target="_blank" rel="external">Hexo Seo优化</a></p>
<h3 id="四、绑定自己的域名"><a href="#四、绑定自己的域名" class="headerlink" title="四、绑定自己的域名"></a>四、绑定自己的域名</h3><ol>
<li>购买域名，个人博客不需要很顶级的域名，阿里云有很多便宜的域名可以购买。比如我自己的域名：<code>chenyixin.win</code>两年十块钱，所以选择你的域名然后购买就可以了。</li>
<li>在\hexo\source文件夹下创建文件 CNAME，用记事本打开并且添加你的域名。</li>
</ol>
<p><strong>注意</strong>：CNAME的意义，简单说就是别名，即将一个域名射到另一个域名。CNAME是没有后缀的，你可以用记事本创建CNAME，创建完毕后请删除后缀<code>.txt</code>。</p>
<ol>
<li><p>然后在 Hexo 文件夹提交</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g -d</div></pre></td></tr></table></figure>
</li>
<li><p>解析域名</p>
</li>
</ol>
<p>你可以选择阿里云的解析。打开阿里云的个人中心，点击域名，有一步解析。我选择的是<a href="https://www.dnspod.cn/" target="_blank" rel="external">DNSPOD解析</a>需要进行如下的设置。</p>
<p>首先打开阿里云的个人中心，点击<code>域名</code>，选择<code>管理</code>，随后点击<code>DNS修改/创建</code>，修改 DNS 为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">f1g1ns2.dnspod.net</div><div class="line">f1g1ns1.dnspod.net</div></pre></td></tr></table></figure></p>
<p>然后打开<a href="https://www.dnspod.cn/" target="_blank" rel="external">DNSPOD</a>点击添加域名，将你的域名添加进去后，按照如下配置添加记录。</p>
<p><img src="http://ohqryljkl.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20161206140953.png" alt=""></p>
<blockquote>
<p>A记录（A record):<br>A记录在DNS中的意义就是，域名到ip地址的转换。<br>所以，当我们在DNS服务器中添加一个A记录时，是告诉服务器，将某个特定的域名映射到一个ip地址。这个算是最简单直白的转换规则了。</p>
<p>主机记录就是域名前缀，常见用法有：<br>www：解析后的域名为 www.chenyixin.win<br>@：直接解析主域名 chenyixin.win<br><em>：泛解析，匹配其他所有域名 </em>.chenyixin.win</p>
</blockquote>
<ol>
<li>等待生效就可以了，最迟要等待72个小时，但一般不会那么久，随后我们就可以通过域名来访问我们的博客了，如果你通过<code>username.github.io</code>最终也将映射到我们的域名上。</li>
</ol>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>此时，使用 Hexo 和 Github Pages 搭建博客就已经告一段落了。接下来，我们可以通过其他的配置来优化我们的博客，或者已经可以开始发布文章了。我在整个搭建博客的过程中，遇到的最大问题首先是下载，没挂VPN下载 Hexo极其的慢，一度然我怀疑人生。但其他的流程很胜利，庆幸没有遇到什么bug。第二个问题是域名解析，当时，心态太着急，基础知识也不够，按照教程绑定了 Github Pages 但就是无法解析成功，后来才发现是因为我的CNAME文件上传的时候带了后缀名。可见基础常识的重要性，如果不是计算机专业的，很可能会犯一些意想之外的问题。另外，简书和谷歌上有很多教程给我提供了很大的帮助，官方文档的阅读也很有用。如果文中有什么错误，烦请大家评论让我改正，有什么问题也可以留言。</p>
<h2 id="参考文章-按照参考频度排名"><a href="#参考文章-按照参考频度排名" class="headerlink" title="参考文章 (按照参考频度排名)"></a>参考文章 (按照参考频度排名)</h2><blockquote>
<p><a href="https://my.oschina.net/ryaneLee/blog/638440" target="_blank" rel="external">Github Pages和Hexo简明教程</a><br><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">Hexo 文档</a><br><a href="https://github.com/iissnan/hexo-theme-next/wiki/%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83" target="_blank" rel="external">NexT 主题配置</a><br><a href="http://winterttr.me/2015/10/23/from-dns-to-github-custom-domain/" target="_blank" rel="external">从DNS到github pages自定义域名 </a><br><a href="http://www.jianshu.com/p/cea41e5c9b2a/comments/5642824#comment-5642824" target="_blank" rel="external">hexo搭建的Github博客绑定域名</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;这是一篇使用 Github Pages 和 Hexo 来搭建个人博客的笔记，记录了搭建博客的过程与其中遇到的问题。其中主要包括了以下几个部分
    
    </summary>
    
    
      <category term="Github" scheme="http://chenyixin.win/tags/Github/"/>
    
      <category term="Hexo" scheme="http://chenyixin.win/tags/Hexo/"/>
    
  </entry>
  
</feed>
